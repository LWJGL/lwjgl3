<!--
  ~ Copyright LWJGL. All rights reserved.
  ~ License terms: https://www.lwjgl.org/license
  -->
<project name="LWJGL" basedir="." default="all" xmlns:if="ant:if" xmlns:unless="ant:unless">

    <property name="build.sysclasspath" value="ignore"/>

    <property name="config" location="config" relative="true"/>

    <import file="${config}/build-definitions.xml"/>
    <import file="${config}/build-assets.xml"/>
    <import file="${config}/${platform}/build.xml"/>

    <!-- Initialize build -->
    <target name="init" description="Initializes the directories required by the build process" depends="bindings">
        <fail message="LWJGL requires Ant version 1.9.3 or higher.">
            <condition>
                <not><antversion atleast="1.9.3"/></not>
            </condition>
        </fail>

        <echo taskname="override" message="Build type: ${build.type}" if:set="env.LWJGL_BUILD_TYPE"/>
        <echo taskname="override" message="Build output: ${build.output}" if:set="env.LWJGL_BUILD_OUTPUT"/>
        <echo taskname="override" message="Build architecture: ${build.arch}" if:set="env.LWJGL_BUILD_ARCH"/>
        <echo taskname="override" message="Build offline: ${build.offline}" if:set="env.LWJGL_BUILD_OFFLINE"/>

        <mkdir-symlink dir="bin"/>

        <ant antfile="update-dependencies.xml" target="check-dependencies" inheritAll="false"/>

        <taskdef resource="org/jetbrains/kotlin/ant/antlib.xml" classpath="${kotlinc}/lib/kotlin-ant.jar"/>
        <taskdef resource="testngtasks" classpath="${lib}/java/testng.jar"/>
    </target>

    <target name="init-generated" description="Initializes the lwjgl3-generated git repository. [Optional]">
        <local name="input"/>
        <input
            message="This action will create a separated git repository at ../lwjgl3-generated/. The repository root will be under modules/lwjgl/. Continue?"
            validargs="y,n"
            defaultvalue="n"
            addproperty="input"
        />
        <fail message="Cancelled.">
            <condition>
                <equals arg1="n" arg2="${input}"/>
            </condition>
        </fail>

        <local name="lwjgl3-generated.exists"/>

        <available file="${module.lwjgl}/.git" property="lwjgl3-generated.exists"/>
        <fail if="lwjgl3-generated.exists" message="The lwjgl3-generated repository is already initialized." />
        <available file="../lwjgl3-generated" type="dir" property="lwjgl3-generated.exists"/>

        <!-- Initialize repository -->
        <exec dir="${module.lwjgl}" executable="git" failonerror="true" taskname="git">
            <arg value="init"/>
            <arg value="--separate-git-dir=../../../lwjgl3-generated"/>
        </exec>

        <!-- Add clone-specific ignore rules -->
        <concat
            destfile="../lwjgl3-generated/info/exclude"
            append="true" outputencoding="UTF-8" fixlastline="true" eol="lf"
            unless:set="lwjgl3-generated.exists"
        >touch.txt
*_license.txt
**/main/**
**/test/**</concat>

        <!-- Setup remote & fetch -->
        <exec dir="${module.lwjgl}" executable="git" failonerror="true" taskname="git" unless:set="lwjgl3-generated.exists">
            <arg value="remote"/>
            <arg value="add"/>
            <arg line="-t master"/>
            <arg line="-m master"/>
            <arg value="-f"/>
            <arg value="origin"/>
            <arg value="https://github.com/LWJGL/lwjgl3-generated.git"/>
        </exec>

        <!-- Checkout master -->
        <exec dir="${module.lwjgl}" executable="git" failonerror="true" taskname="git" unless:set="lwjgl3-generated.exists">
            <arg value="checkout"/>
            <arg line="master"/>
        </exec>
    </target>

    <target name="init-wiki" description="Initializes the lwjgl3-wiki git repository in /wiki. [Optional]">
        <confirm-replace dir="wiki" msg="The wiki directory contents will be replaced with a fresh clone of the lwjgl3-wiki repository. Continue?"/>

        <delete dir="wiki"/>
        <exec executable="git" failonerror="true">
            <arg value="clone"/>
            <arg value="https://github.com/LWJGL/lwjgl3-wiki.wiki.git"/>
            <arg value="wiki"/>
        </exec>
    </target>

    <target name="reset" description="Resets the repository to its initial state.">
        <local name="input"/>
        <input
            message="This action will clean everything and also remove libraries and sub-repositories. Continue?"
            validargs="y,n"
            defaultvalue="n"
            addproperty="input"
        />
        <fail message="Cancelled.">
            <condition>
                <equals arg1="n" arg2="${input}"/>
            </condition>
        </fail>

        <antcall target="clean"/>

        <delete-symlink dir="bin"/>

        <delete dir=".gradle"/>
        <delete dir="wiki"/>

        <echo message="Reset successful."/>
    </target>

    <target name="clean" description="Cleans all directories controlled by this script">
        <delete includeemptydirs="true">
            <fileset dir="bin">
                <include name="**/*"/>
                <exclude name="libs/**"/>
            </fileset>
        </delete>

        <forEachModule>
            <delete-symlink dir="${module.lwjgl}/${module}/src/generated"/>
        </forEachModule>
        <!-- Do not delete /wiki, it may contain the lwjgl3-wiki git repo -->

        <echo message="Cleanup successful."/>
    </target>

    <target name="clean-kotlin" description="Deletes Kotlin binary files produced by this script">
        <delete dir="${bin.generator}"/>
        <delete dir="${bin.templates}"/>
    </target>

    <target name="clean-java" description="Deletes Java binary files produced by this script">
        <delete dir="${bin.lwjgl}"/>
        <delete dir="${bin.samples}"/>
        <delete dir="${bin.test}"/>
    </target>

    <target name="clean-native" description="Deletes native binary files produced by this script">
        <delete dir="${bin.native}"/>
    </target>

    <target name="clean-generated" description="Deletes sources, test results and documentation generated by this script" depends="clean-generated-java,clean-generated-native">
        <delete dir="${bin.test.html}"/>
        <delete dir="bin/javadoc"/>
    </target>

    <target name="clean-generated-java" description="Deletes Java sources generated by this script">
        <delete file="${bin.generator}/generated-touch.txt" quiet="true"/>
        <forEachModule>
            <delete dir="${module.lwjgl}/${module}/src/generated/java"/>
        </forEachModule>
    </target>

    <target name="clean-generated-native" description="Deletes native sources generated by this script">
        <delete file="${bin.generator}/generated-touch.txt" quiet="true"/>
        <forEachModule>
            <delete dir="${module.lwjgl}/${module}/src/generated/c" quiet="true"/>
        </forEachModule>
    </target>

    <target name="all" description="Builds LWJGL and runs the tests" depends="compile-templates, tests"/>

    <target name="-compile-generator" depends="init">
        <local name="generator-uptodate"/>
        <uptodate targetfile="${bin.generator}/touch.txt" property="generator-uptodate">
            <srcfiles dir="${src.generator}/kotlin" includes="**"/>
        </uptodate>

        <echo message="Compiling Kotlin generator..." level="info" taskname="Generator" unless:set="generator-uptodate"/>
        <mkdir dir="${bin.generator}"/>
        <kotlinc moduleName="generator" output="${bin.generator}" printVersion="true" unless:set="generator-uptodate">
            <compilerarg line="-jvm-target 1.8"/>
            <compilerarg value="-Xno-call-assertions"/>
            <compilerarg value="-Xno-param-assertions"/>
            <compilerarg value="-Xreport-perf"/>

            <src path="${src.generator}/kotlin"/>
        </kotlinc>
        <touch file="${bin.generator}/touch.txt" unless:set="generator-uptodate"/>

        <lwjgl.javac
            destdir="${bin.generator}"

            srcdir="${src.generator}/java"
            includes="org/lwjgl/**"

            taskname="javac: Generator Tools &amp; Doclets"
        >
            <classpath path="${java.home}/../lib/tools.jar" unless:set="jdk9"/>
            <classpath path="${env.JAVA8_HOME}/lib/tools.jar" if:set="env.JAVA8_HOME"/>
        </lwjgl.javac>
    </target>

    <target name="compile-templates" description="Compiles the Templates module" depends="-compile-generator">
        <local name="templates-uptodate"/>
        <uptodate targetfile="${bin.templates}/touch.txt" property="templates-uptodate">
            <srcfiles dir="${module.lwjgl}" includes="**/kotlin/**/*.kt"/>
            <srcfiles dir="${bin.generator}" includes="touch.txt"/>
        </uptodate>

        <local name="egl_types"/>
        <condition property="egl_types">
            <and>
                <isfalse value="${binding.egl}"/>
                <istrue value="${binding.glfw}"/>
            </and>
        </condition>

        <local name="opencl_types"/>
        <condition property="opencl_types">
            <and>
                <isfalse value="${binding.opencl}"/>
                <istrue value="${binding.opengl}"/>
            </and>
        </condition>

        <local name="opengl_types"/>
        <condition property="opengl_types">
            <and>
                <isfalse value="${binding.opengl}"/>
                <or>
                    <istrue value="${binding.glfw}"/>
                    <istrue value="${binding.opencl}"/>
                </or>
            </and>
        </condition>

        <local name="vulkan_types"/>
        <condition property="vulkan_types">
            <and>
                <isfalse value="${binding.vulkan}"/>
                <istrue value="${binding.glfw}"/>
            </and>
        </condition>

        <local name="core.kotlin.path"/>
        <property name="core.kotlin.path" value="${module.lwjgl}/core/src/templates/kotlin/core"/>

        <echo message="Compiling Kotlin templates. This will take 1-2 minutes..." level="info" taskname="Templates" unless:set="templates-uptodate"/>
        <mkdir dir="${bin.templates}"/>
        <kotlinc moduleName="templates" output="${bin.templates}" printVersion="true" unless:set="templates-uptodate">
            <classpath>
                <pathelement location="${bin.generator}"/>
            </classpath>

            <compilerarg line="-jvm-target 1.8"/>
            <compilerarg value="-Xno-call-assertions"/>
            <compilerarg value="-Xno-param-assertions"/>
            <compilerarg value="-Xreport-perf"/>

            <src path="${core.kotlin.path}/dyncall"/>
            <src path="${core.kotlin.path}/jni"/>
            <src path="${core.kotlin.path}/libc"/>
            <src path="${core.kotlin.path}/linux"/>
            <src path="${core.kotlin.path}/macos"/>
            <src path="${core.kotlin.path}/templates"/>
            <src path="${core.kotlin.path}/windows"/>

            <src path="${module.templatepath}"/>

            <src path="${module.lwjgl}/egl/src/main/kotlin/egl/EGLTypes.kt" if:set="egl_types"/>
            <src path="${module.lwjgl}/opencl/src/main/kotlin/opencl/CLTypes.kt" if:set="opencl_types"/>
            <src path="${module.lwjgl}/opengl/src/main/kotlin/opengl/GLTypes.kt" if:set="opengl_types"/>
            <src path="${module.lwjgl}/opengl/src/main/kotlin/opengl/GLXTypes.kt" if:set="opengl_types"/>
            <src path="${module.lwjgl}/opengl/src/main/kotlin/opengl/WGLTypes.kt" if:set="opengl_types"/>
            <src path="${module.lwjgl}/vulkan/src/main/kotlin/vulkan/VKBase.kt" if:set="vulkan_types"/>
            <src path="${module.lwjgl}/vulkan/src/main/kotlin/vulkan/VKTypes.kt" if:set="vulkan_types"/>
            <src path="${module.lwjgl}/vulkan/src/main/kotlin/vulkan/ExtensionTypes.kt" if:set="vulkan_types"/>
        </kotlinc>
        <touch file="${bin.templates}/touch.txt" unless:set="templates-uptodate"/>
    </target>

    <target name="touch-kotlinc" description="Used for touching from an IDE">
        <touch file="${bin.generator}/touch.txt"/>
        <touch file="${bin.templates}/touch.txt"/>
    </target>

    <target name="formatter" description="Runs the template formatter tool" depends="-compile-generator">
        <java
            classname="org.lwjgl.generator.util.TemplateFormatter"
            fork="true"
            spawn="true"
        >
            <classpath>
                <pathelement path="${bin.generator}"/>
                <pathelement path="${test.resources}"/>
            </classpath>
        </java>
    </target>

    <target name="urlValidator" description="Runs the URL validator tool" depends="-compile-generator">
        <java
            classname="org.lwjgl.generator.util.URLValidator"
            fork="true"
        >
            <classpath>
                <pathelement path="${bin.generator}"/>
                <pathelement path="${test.resources}"/>
            </classpath>
            <arg line="${args}" if:set="args"/>
        </java>
    </target>

    <target name="generate" description="Runs the Generator" depends="init">
        <local name="has-compiled-templates"/>
        <available file="${bin.templates}/META-INF" type="dir" property="has-compiled-templates"/>
        <fail unless="has-compiled-templates" message="Please invoke the compile-templates target first."/>

        <local name="generated-uptodate"/>
        <uptodate property="generated-uptodate" targetfile="${bin.generator}/generated-touch.txt">
            <srcfiles dir="${config}" includes="build-bindings.xml"/>
            <srcfiles dir="${bin.generator}" includes="touch.txt"/>
            <srcfiles dir="${bin.templates}" includes="touch.txt"/>
        </uptodate>

        <forEachModule unless:set="generated-uptodate">
            <local name="linkPath"/>
            <property name="linkPath" location="${module.lwjgl}/${module}/src/generated" relative="true"/>
            <mkdir-symlink dir="${linkPath}"/>
        </forEachModule>

        <java
            classname="org.lwjgl.generator.GeneratorKt"
            fork="true"
            failonerror="true"
            taskname="Generator"
            unless:set="generated-uptodate"
        >
            <classpath>
                <pathelement path="${bin.generator}"/>
                <pathelement path="${bin.templates}"/>
                <pathelement path="${kotlinc}/lib/kotlin-runtime.jar"/>
            </classpath>

            <jvmarg line="${generator.bindings}"/>

            <arg value="${module.lwjgl}"/>
        </java>
        <touch file="${bin.generator}/generated-touch.txt" verbose="false" unless:set="generated-uptodate"/>
    </target>

    <macrodef name="compileBinding">
        <attribute name="binding"/>
        <element name="body" implicit="yes" optional="yes"/>
        <sequential>
            <local name="hasMain"/>
            <available file="${module.lwjgl}/@{binding}/src/main/java" type="dir" property="hasMain"/>

            <mkdir dir="${bin.lwjgl}/@{binding}"/>
            <lwjgl.javac destdir="${bin.lwjgl}/@{binding}" taskname="javac: @{binding}" if:true="${binding.@{binding}}">
                <classpath>
                    <pathelement path="${bin.lwjgl}/core"/>
                    <pathelement path="${lib}/java/jsr305.jar"/>
                    <body/>
                </classpath>

                <src>
                    <pathelement path="${module.lwjgl}/@{binding}/src/main/java" if:set="hasMain"/>
                    <pathelement path="${module.lwjgl}/@{binding}/src/generated/java"/>
                </src>
                <include name="**"/>
            </lwjgl.javac>
        </sequential>
    </macrodef>

    <target name="compile" description="Compiles the Java source code" depends="generate">
        <mkdir dir="${bin.lwjgl}/core"/>
        <lwjgl.javac destdir="${bin.lwjgl}/core" taskname="javac: core">
            <classpath><pathelement path="${lib}/java/jsr305.jar"/></classpath>
            <src>
                <pathelement path="${module.lwjgl}/core/src/main/java/"/>
                <pathelement path="${module.lwjgl}/core/src/generated/java/"/>
            </src>
            <include name="**"/>

            <!-- Supresses internal API (e.g. Unsafe) usage warnings -->
            <compilerarg value="-XDignore.symbol.file=true"/>
        </lwjgl.javac>

        <mkdir dir="${bin.lwjgl}/core/META-INF/versions/9" if:set="jdk9"/>
        <delete file="${bin.lwjgl}/core/META-INF/versions/9/module-info.class" quiet="true" if:set="jdk9"/>
        <lwjgl.javac9
            destdir="${bin.lwjgl}/core/META-INF/versions/9"
            classpath="${bin.lwjgl}/core"

            srcdir="${module.lwjgl}/core/src/main/java9"
            includes="**"

            taskname="javac: Core - Java 9"
            if:set="jdk9"
        />

        <parallel threadsPerProcessor="1">
            <compileBinding binding="assimp"/>
            <compileBinding binding="bgfx"/>
            <compileBinding binding="egl"/>
            <compileBinding binding="jawt"/>
            <compileBinding binding="jemalloc"/>
            <compileBinding binding="lmdb"/>
            <compileBinding binding="lz4"/>
            <compileBinding binding="nanovg"/>
            <compileBinding binding="nfd"/>
            <compileBinding binding="nuklear"/>
            <compileBinding binding="odbc"/>
            <compileBinding binding="openal"/>
            <compileBinding binding="opencl"/>
            <compileBinding binding="openvr"/>
            <compileBinding binding="par"/>
            <compileBinding binding="remotery"/>
            <compileBinding binding="rpmalloc"/>
            <compileBinding binding="sse"/>
            <compileBinding binding="stb"/>
            <compileBinding binding="tinyexr"/>
            <compileBinding binding="tinyfd"/>
            <compileBinding binding="tootle"/>
            <compileBinding binding="vulkan"/>
            <compileBinding binding="xxhash"/>
            <compileBinding binding="yoga"/>
            <compileBinding binding="zstd"/>
        </parallel>

        <parallel threadsPerProcessor="1">
            <compileBinding binding="opengl">
                <pathelement path="${bin.lwjgl}/opencl"/>
            </compileBinding>
            <compileBinding binding="opengles">
                <pathelement path="${bin.lwjgl}/egl"/>
            </compileBinding>
            <compileBinding binding="glfw">
                <pathelement path="${bin.lwjgl}/egl"/>
                <pathelement path="${bin.lwjgl}/vulkan"/>
            </compileBinding>
            <compileBinding binding="ovr">
                <pathelement path="${bin.lwjgl}/vulkan"/>
            </compileBinding>
            <compileBinding binding="vma">
                <pathelement path="${bin.lwjgl}/vulkan"/>
            </compileBinding>
        </parallel>
    </target>

    <target name="compile-native" description="Compiles the native source code" depends="init, compile">
        <mkdir dir="${bin.native}"/>
        <antcall target="compile-native-platform"/>
    </target>

    <target name="compile-tests" description="Compiles the LWJGL test suite" depends="compile">
        <mkdir dir="${bin.test}"/>
        <forEachModule>
            <local name="hasTests"/>
            <available property="hasTests" file="${module.lwjgl}/${module}/src/test/java" type="dir"/>

            <lwjgl.javac
                destdir="${bin.test}"
                srcdir="${module.lwjgl}/${module}/src/test/java"
                includes="**"
                taskname="javac: ${module} tests"
                if:set="hasTests"
            >
                <classpath>
                    <pathelement path="${bin.lwjgl}/core"/>
                    <pathelement path="${bin.lwjgl}/${module}"/>
                    <pathelement path="${lib}/java/jsr305.jar"/>
                    <pathelement path="${lib}/java/testng.jar"/>
                </classpath>
            </lwjgl.javac>
        </forEachModule>

        <local name="test.bgfx"/>
        <condition property="test.bgfx">
            <and>
                <istrue value="${binding.bgfx}"/>
                <istrue value="${binding.glfw}"/>
            </and>
        </condition>

        <local name="test.egl"/>
        <condition property="test.egl">
            <and>
                <istrue value="${binding.egl}"/>
                <istrue value="${binding.glfw}"/>
                <istrue value="${binding.opengles}"/>
            </and>
        </condition>

        <local name="test.glfw"/>
        <condition property="test.glfw">
            <and>
                <istrue value="${binding.glfw}"/>
                <istrue value="${binding.opengl}"/>
            </and>
        </condition>

        <local name="test.jawt"/>
        <condition property="test.jawt">
            <and>
                <istrue value="${binding.jawt}"/>
                <istrue value="${binding.opengl}"/>
            </and>
        </condition>

        <local name="test.nanovg"/>
        <condition property="test.nanovg">
            <and>
                <istrue value="${test.glfw}"/>
                <istrue value="${binding.nanovg}"/>
            </and>
        </condition>

        <local name="test.nuklear"/>
        <condition property="test.nuklear">
            <and>
                <istrue value="${test.glfw}"/>
                <istrue value="${binding.nuklear}"/>
            </and>
        </condition>

        <local name="test.nfd"/>
        <condition property="test.nfd">
            <and>
                <istrue value="${test.glfw}"/>
                <istrue value="${binding.nfd}"/>
            </and>
        </condition>

        <local name="test.openal"/>
        <condition property="test.openal">
            <and>
                <istrue value="${binding.openal}"/>
                <istrue value="${binding.stb}"/>
            </and>
        </condition>

        <local name="test.opencl"/>
        <condition property="test.opencl">
            <and>
                <istrue value="${binding.glfw}"/>
                <istrue value="${binding.opencl}"/>
            </and>
        </condition>

        <local name="test.par"/>
        <condition property="test.par">
            <and>
                <istrue value="${binding.glfw}"/>
                <istrue value="${binding.nfd}"/>
                <istrue value="${binding.par}"/>
                <istrue value="${binding.stb}"/>
            </and>
        </condition>

        <local name="test.stb"/>
        <condition property="test.stb">
            <and>
                <istrue value="${binding.stb}"/>
                <istrue value="${binding.glfw}"/>
            </and>
        </condition>

        <local name="test.tinyexr"/>
        <condition property="test.tinyexr">
            <and>
                <istrue value="${test.glfw}"/>
                <istrue value="${binding.tinyexr}"/>
                <istrue value="${binding.tinyfd}"/>
            </and>
        </condition>

        <local name="test.tinyfd"/>
        <condition property="test.tinyfd">
            <and>
                <istrue value="${test.glfw}"/>
                <istrue value="${binding.tinyfd}"/>
            </and>
        </condition>

        <local name="test.tootle"/>
        <condition property="test.tootle">
            <and>
                <istrue value="${binding.assimp}"/>
                <istrue value="${binding.par}"/>
                <istrue value="${binding.tootle}"/>
            </and>
        </condition>

        <local name="test.vulkan"/>
        <condition property="test.vulkan">
            <and>
                <istrue value="${binding.glfw}"/>
                <istrue value="${binding.vulkan}"/>
            </and>
        </condition>

        <local name="test.yoga"/>
        <condition property="test.yoga">
            <and>
                <istrue value="${test.glfw}"/>
                <istrue value="${binding.stb}"/>
                <istrue value="${binding.yoga}"/>
            </and>
        </condition>

        <mkdir dir="${bin.samples}"/>
        <lwjgl.javac srcdir="modules/samples/src/test/java" destdir="${bin.samples}" taskname="javac: Samples">
            <classpath>
                <pathelement path="${module.classpath}"/>
                <pathelement path="${bin.test}"/>
                <pathelement path="${lib}/java/jsr305.jar"/>
                <pathelement path="${lib}/java/joml.jar"/>
            </classpath>

            <!-- Demos -->
            <include name="org/lwjgl/demo/assimp/**" if:true="${binding.assimp}"/>
            <include name="org/lwjgl/demo/bgfx/**" if:set="test.bgfx"/>
            <include name="org/lwjgl/demo/egl/**" if:set="test.egl"/>
            <include name="org/lwjgl/demo/glfw/**" if:set="test.glfw"/>
            <include name="org/lwjgl/demo/nanovg/**" if:set="test.nanovg"/>
            <include name="org/lwjgl/demo/nuklear/**" if:set="test.nuklear"/>

            <include name="org/lwjgl/demo/openal/**" if:true="${binding.openal}"/>
            <exclude name="org/lwjgl/demo/openal/ALCDemo.java" unless:set="test.openal"/>
            <exclude name="org/lwjgl/demo/openal/EFXTest.java" unless:set="test.openal"/>
            <exclude name="org/lwjgl/demo/openal/HRTFDemo.java" unless:set="test.openal"/>

            <include name="org/lwjgl/demo/opencl/**" if:set="test.opencl"/>
            <include name="org/lwjgl/demo/opencl/CLDemo.java" if:true="${binding.opencl}"/>

            <include name="org/lwjgl/demo/opengl/**" if:true="${binding.opengl}"/>

            <include name="org/lwjgl/demo/openvr/**" if:true="${binding.openvr}"/>
            <include name="org/lwjgl/demo/ovr/**" if:true="${binding.ovr}"/>
            <include name="org/lwjgl/demo/stb/**" if:set="test.stb"/>

            <include name="org/lwjgl/demo/system/jawt/**" if:set="test.jawt"/>

            <include name="org/lwjgl/demo/util/*.java"/>
            <include name="org/lwjgl/demo/util/lmdb/**" if:true="${binding.lmdb}"/>
            <include name="org/lwjgl/demo/util/lz4/**" if:true="${binding.lz4}"/>
            <include name="org/lwjgl/demo/util/nfd/**" if:set="test.nfd"/>
            <include name="org/lwjgl/demo/util/par/**" if:set="test.par"/>
            <include name="org/lwjgl/demo/util/tinyexr/**" if:set="test.tinyexr"/>
            <include name="org/lwjgl/demo/util/tinyfd/**" if:set="test.tinyfd"/>
            <include name="org/lwjgl/demo/util/tootle/**" if:set="test.tootle"/>
            <include name="org/lwjgl/demo/util/xxhash/**" if:true="${binding.xxhash}"/>
            <include name="org/lwjgl/demo/util/yoga/**" if:set="test.yoga"/>
            <include name="org/lwjgl/demo/util/zstd/**" if:true="${binding.zstd}"/>

            <include name="org/lwjgl/demo/vulkan/**" if:set="test.vulkan"/>
        </lwjgl.javac>
    </target>

    <target name="tests" description="Runs the LWJGL test suite" depends="compile-tests, compile-native">
        <testng outputDir="${bin.test.html}" taskname="Tests">
            <classpath>
                <pathelement path="${bin.lwjgl}/core/META-INF/versions/9" if:set="core.java9"/>
                <pathelement path="${module.classpath}"/>
                <pathelement path="${bin.test}"/>
                <pathelement path="${lib}/java/jcommander.jar"/>
            </classpath>

            <!--<jvmarg value="-Xcheck:jni"/>--> <!-- SIMD fails with this (see -XX:+RestoreMXCSROnJNICall) -->
            <jvmarg value="-ea"/>
            <jvmarg value="-Dorg.lwjgl.util.Debug=true"/>
            <jvmarg value="-Dorg.lwjgl.util.DebugAllocator=true"/>
            <jvmarg value="-Djava.library.path=${lib}"/>
            <jvmarg value="-XstartOnFirstThread" if:set="platform.macos"/>
            <jvmarg value="-Xss256k"/> <!-- for StackTest::testSOE -->
            <jvmarg line="${jvmargs}" if:set="jvmargs"/>

            <xmlfileset dir="${config}" includes="tests.xml,tests_${platform}.xml"/>
        </testng>
    </target>

    <target name="demo" description="Runs an LWJGL demo" depends="compile-tests, compile-native, -update-assets">
        <fail message="Please use -Dclass=&lt;class&gt; to specify the demo main class to run." unless="class"/>

        <local name="spawn"/>
        <condition property="spawn" value="true" else="false">
            <isset property="jitwatch"/>
        </condition>

        <local name="failonerror"/>
        <condition property="failonerror" value="false" else="true">
            <istrue value="${spawn}"/>
        </condition>

        <java classname="${class}" fork="true" failonerror="${failonerror}" spawn="${spawn}" taskname="Demo">
            <classpath>
                <pathelement path="${bin.lwjgl}/core/META-INF/versions/9" if:set="core.java9"/>
                <pathelement path="${module.classpath}"/>
                <pathelement path="${bin.test}"/>
                <pathelement path="${bin.samples}"/>
                <pathelement path="${test.resources}"/>
                <pathelement path="${lib}/java/testng.jar"/>
                <pathelement path="${lib}/java/joml.jar"/>
            </classpath>

            <jvmarg value="-Djava.library.path=${lib}"/>
            <jvmarg value="-XstartOnFirstThread" if:set="platform.macos"/>
            <!--<jvmarg value="-Xcheck:jni"/>-->

            <jvmarg line="-XX:+UnlockDiagnosticVMOptions -XX:+TraceClassLoading -XX:+LogCompilation" if:set="jitwatch"/>
            <jvmarg line="-XX:+PrintAssembly -XX:PrintAssemblyOptions=intel -XX:-TieredCompilation -XX:-UseCompressedOops" if:set="jitwatch"/>
            <jvmarg line="-XX:LogFile=${jitwatch}" if:set="jitwatch"/>

            <jvmarg line="${jvmargs}" if:set="jvmargs"/>

            <arg line="${args}" if:set="args"/>
        </java>
    </target>

    <target name="-build-version" depends="compile">
        <local name="stderr"/>
        <java classname="org.lwjgl.Version" fork="true" failonerror="true" outputproperty="build.version" errorproperty="stderr">
            <classpath path="${bin.lwjgl}/core"/>
            <jvmarg value="-Djava.library.path=${lib}"/>
        </java>
    </target>

    <!-- Includes all modules for javadoc.lwjgl.org -->
    <target name="javadoc" description="Generates the LWJGL JavaDoc" depends="-compile-generator,-build-version">
        <echo message="It is recommended to generate JavaDoc on JDK 9 or higher." unless:set="jdk9" taskname="Warning"/>
        <delete dir="bin/javadoc"/>

        <path id="javadoc.sources">
            <pathelement path="${module.sourcepath}"/>
        </path>

        <javadoc
            destdir="bin/javadoc"
            sourcepathref="javadoc.sources"
            source="1.8"
            windowtitle="LWJGL ${build.version}"
            encoding="UTF-8"
            docencoding="UTF-8"
            charset="UTF-8"
            useexternalfile="true"
            nohelp="true"
            notree="true"
            public="true"
            Splitindex="true"
            doclet="org.lwjgl.system.ExcludeDoclet"
            docletpath="${bin.generator}"
            maxmemory="1G"
            failonerror="true"
        >
            <doctitle><![CDATA[<h1>Lightweight Java Game Library</h1>]]></doctitle>
            <bottom><![CDATA[<i>Copyright LWJGL. All Rights Reserved. <a href="https://www.lwjgl.org/license">License terms</a>.</i>]]></bottom>

            <classpath>
                <pathelement path="${lib}/java/jsr305.jar"/>
            </classpath>

            <arg value="-XDignore.symbol.file=true"/> <!-- Supresses internal API (e.g. Unsafe) usage warnings -->

            <arg value="-Xdoclint"/>
            <arg line="-Xmaxwarns 1000"/>
            <arg value="-html5" if:set="jdk9"/>
            <arg value="-stylesheetfile ${config}/javadoc.css" if:set="jdk9"/>
            <arg line="-J-Dfile.encoding=UTF8"/>
            <arg line="--add-exports jdk.javadoc/com.sun.tools.doclets=ALL-UNNAMED" if:set="jdk9"/>
        </javadoc>
        <get-quiet name="favicon" url="https://www.lwjgl.org/favicon.ico" dest="bin/javadoc"/>

        <java classname="org.lwjgl.system.JavadocPostProcess" failonerror="true">
            <classpath path="${bin.generator}"/>

            <arg value="bin/javadoc/org/lwjgl"/>
        </java>
    </target>

    <target name="upload-native" description="Uploads native build artifacts to build.lwjgl.org" depends="compile-native">
        <fail message="AWS credentials not configured.">
            <condition>
                <not>
                    <or>
                        <and>
                            <isset property="env.AWS_ACCESS_KEY_ID"/>
                            <isset property="env.AWS_SECRET_ACCESS_KEY"/>
                        </and>
                        <isset property="env.AWS_CONFIG_FILE"/>
                    </or>
                </not>
            </condition>
        </fail>

        <local name="revision"/>
        <property name="revision" value="liblwjgl.so.git" if:set="platform.linux"/>
        <property name="revision" value="liblwjgl.dylib.git" if:set="platform.macos"/>
        <condition property="revision" value="lwjgl.dll.git" else="lwjgl32.dll.git" if:set="platform.windows">
            <equals arg1="${build.arch}" arg2="x64"/>
        </condition>

        <exec executable="git" failonerror="true" output="${lib}/${revision}" taskname="Git revision">
            <arg value="log"/>
            <arg value="--first-parent"/>
            <arg value="--pretty=format:%H"/>
            <arg value="HEAD~2..HEAD~1"/> <!-- Skip the CI commit -->
        </exec>

        <local name="libraries"/>
        <property name="libraries" value="liblwjgl*" unless:set="platform.windows"/>
        <condition property="libraries" value="lwjgl*" else="lwjgl*32.*" if:set="platform.windows">
            <equals arg1="${build.arch}" arg2="x64"/>
        </condition>

        <local name="exclude_libraries"/>
        <condition property="exclude_libraries" value="lwjgl*32.*" if:set="platform.windows">
            <equals arg1="${build.arch}" arg2="x64"/>
        </condition>

        <apply executable="aws" failonerror="true" relative="true" taskname="S3 upload">
            <arg value="s3"/>
            <arg value="cp"/>

            <srcfile/>

            <arg value="s3://build.lwjgl.org/${build.type}/${platform.remote}/${build.arch}/"/>
            <arg line='--acl public-read --storage-class REDUCED_REDUNDANCY --cache-control "public, must-revalidate, proxy-revalidate, max-age=0"'/>

            <fileset dir=".">
                <include name="${lib}/${libraries}"/>
                <exclude name="${lib}/${exclude_libraries}" if:set="exclude_libraries"/>
            </fileset>
        </apply>
    </target>

    <macrodef name="get-release">
        <attribute name="url"/>

        <sequential>
            <get src="https://build.lwjgl.org/${build.type}/@{url}" dest="${release}/${module}/native" verbose="false" usetimestamp="true"/>
        </sequential>
    </macrodef>

    <macrodef name="lwjgl-jar">
        <attribute name="destfile"/>
        <attribute name="title"/>
        <element name="content" optional="true" implicit="true"/>
        <sequential>
            <jar destfile="@{destfile}" level="9" index="true" indexmetainf="true" whenmanifestonly="skip">
                <manifest>
                    <attribute name="Specification-Title" value="Lightweight Java Game Library - @{title}"/>
                    <attribute name="Specification-Version" value="${build.version}"/>
                    <attribute name="Specification-Vendor" value="lwjgl.org"/>
                    <attribute name="Implementation-Title" value="${module}"/>
                    <attribute name="Implementation-Version" value="${revision}"/>
                    <attribute name="Implementation-Vendor" value="lwjgl.org"/>
                    <attribute name="Multi-Release" value="true" if:set="jdk9"/>
                </manifest>
                <content/>
            </jar>
        </sequential>
    </macrodef>

    <macrodef name="natives-jar">
        <attribute name="name"/>
        <attribute name="title"/>
        <attribute name="platform"/>
        <attribute name="extension"/>
        <element name="content" optional="true" implicit="true"/>
        <sequential>
            <local name="platform.skip"/>
            <condition property="platform.skip">
                <resourcecount when="eq" count="0">
                    <fileset dir="${release}/${module}/native" includes="*@{extension}"/>
                </resourcecount>
            </condition>

            <lwjgl-jar destfile="${release}/${module}/${module}-natives-@{platform}.jar" title="@{title}" unless:set="platform.skip">
                <fileset dir="${release}/${module}/native" includes="*@{extension}*"/>
                <fileset dir="${bin.lwjgl}/@{name}.natives" includes="META-INF/versions/9/module-info.class" if:set="jdk9"/>
            </lwjgl-jar>
        </sequential>
    </macrodef>

    <macrodef name="release-natives">
        <attribute name="name"/>
        <attribute name="title"/>
        <attribute name="native-library"/>
        <element name="content" optional="true" implicit="true"/>
        <sequential>
            <mkdir dir="${release}/${module}/native"/>

            <local name="auto-natives"/>
            <condition property="auto-natives">
                <not>
                    <length string="@{native-library}" length="0"/>
                </not>
            </condition>

            <local name="git-revision"/>
            <condition property="git-revision" if:set="auto-natives">
                <not>
                    <matches pattern="^lwjgl_.+" string="@{native-library}"/>
                </not>
            </condition>

            <parallel threadsPerProcessor="4" failonany="true">
                <get-release url="linux/x64/lib@{native-library}.so" if:set="auto-natives"/>
                <get-release url="macosx/x64/lib@{native-library}.dylib" if:set="auto-natives"/>
                <get-release url="windows/x64/@{native-library}.dll" if:set="auto-natives"/>
                <get-release url="windows/x86/@{native-library}32.dll" if:set="auto-natives"/>

                <get-release url="linux/x64/lib@{native-library}.so.git" if:set="git-revision"/>
                <get-release url="macosx/x64/lib@{native-library}.dylib.git" if:set="git-revision"/>
                <get-release url="windows/x64/@{native-library}.dll.git" if:set="git-revision"/>
                <get-release url="windows/x86/@{native-library}32.dll.git" if:set="git-revision"/>

                <content/>
            </parallel>

            <checksum algorithm="SHA-1" fileext=".sha1">
                <fileset dir="${release}/${module}/native">
                    <include name="*.dll"/>
                    <include name="*.dylib"/>
                    <include name="*.so"/>
                </fileset>
            </checksum>

            <parallel threadsPerProcessor="1" failonany="true">
                <natives-jar name="@{name}" title="@{title}" platform="linux" extension=".so"/>
                <natives-jar name="@{name}" title="@{title}" platform="macos" extension=".dylib"/>
                <natives-jar name="@{name}" title="@{title}" platform="windows" extension=".dll"/>
            </parallel>
        </sequential>
    </macrodef>

    <macrodef name="release-module">
        <attribute name="package"/>
        <attribute name="name"/>
        <attribute name="title"/>
        <attribute name="native-library" default=""/>
        <attribute name="license" default="@{name}"/>
        <element name="natives" optional="true"/>
        <sequential>
            <local name="module"/>
            <condition property="module" value="lwjgl" else="lwjgl-@{name}">
                <equals arg1="@{name}" arg2="core"/>
            </condition>

            <local name="module.java"/>
            <condition property="module.java" value="org.lwjgl" else="org.lwjgl.@{name}">
                <equals arg1="@{name}" arg2="core"/>
            </condition>

            <!-- Bundle natives -->
            <release-natives name="@{name}" title="@{title}" native-library="@{native-library}" unless:set="java-only.binding.@{name}">
                <natives/>
            </release-natives>

            <!-- Bundle classes -->
            <lwjgl-jar destfile="${release}/${module}/${module}.jar" title="@{title}">
                <fileset dir="${release}/${module}/native" includes="*.sha1" unless:set="java-only.binding.@{name}"/>
                <fileset dir="${bin.lwjgl}/@{name}" includes="**"/>
            </lwjgl-jar>
            <delete dir="${release}/${module}/native" unless:set="java-only.binding.@{name}"/>

            <local name="hasMain"/>
            <available file="${module.lwjgl}/@{name}/src/main/java" type="dir" property="hasMain"/>

            <!-- Bundle javadoc -->
            <mkdir dir="${release}/${module}/javadoc"/>
            <javadoc
                destdir="${release}/${module}/javadoc"
                source="1.8"
                windowtitle="LWJGL ${build.version} - @{title}"
                encoding="UTF-8"
                docencoding="UTF-8"
                charset="UTF-8"
                useexternalfile="true"
                nohelp="true"
                notree="true"
                public="true"
                doclet="org.lwjgl.system.ExcludeDoclet"
                docletpath="${bin.generator}"
                failonerror="true"
            >
                <doctitle><![CDATA[<h1>LWJGL - @{title}</h1>]]></doctitle>
                <bottom><![CDATA[<i>Copyright LWJGL. All Rights Reserved. <a href="https://www.lwjgl.org/license">License terms</a>.</i>]]></bottom>

                <classpath>
                    <pathelement path="${module.classpath}"/>
                    <pathelement path="${lib}/java/jsr305.jar"/>
                </classpath>

                <fileset dir="${module.lwjgl}/@{name}/src/main/java" includes="**" if:set="hasMain"/>
                <fileset dir="${module.lwjgl}/@{name}/src/generated/java" includes="**"/>

                <arg value="-XDignore.symbol.file=true"/> <!-- Supresses internal API (e.g. Unsafe) usage warnings -->

                <arg value="-Xdoclint:none"/>
                <arg line="-Xmaxwarns 1"/>
                <arg value="-html5" if:set="jdk9"/>
                <arg value="-stylesheetfile ${config}/javadoc.css" if:set="jdk9"/>
                <arg line="-J-Dfile.encoding=UTF8"/>
                <arg line="--add-exports jdk.javadoc/com.sun.tools.doclets=ALL-UNNAMED" if:set="jdk9"/>
            </javadoc>
            <get-quiet name="favicon" url="https://www.lwjgl.org/favicon.ico" dest="${release}/${module}/javadoc"/>

            <java classname="org.lwjgl.system.JavadocPostProcess" failonerror="true">
                <classpath path="${bin.generator}"/>

                <arg value="${release}/${module}/javadoc/org/lwjgl"/>
            </java>
            <zip destfile="${release}/${module}/${module}-javadoc.jar" basedir="${release}/${module}/javadoc" includes="**" level="9"/>
            <delete dir="${release}/${module}/javadoc"/>

            <!-- Bundle source -->
            <copy
                file ="${module.lwjgl}/@{name}/src/main/resources/module-info.java"
                todir="${module.lwjgl}/@{name}/src/generated/java/META-INF/versions/9"
                quiet="true"
                if:set="jdk9"
            />
            <jar destfile="${release}/${module}/${module}-sources.jar" level="9">
                <fileset dir="${module.lwjgl}/@{name}/src/main/java" includes="**" if:set="hasMain"/>
                <fileset dir="${module.lwjgl}/@{name}/src/generated/java" includes="**"/>
            </jar>
            <delete dir="${module.lwjgl}/@{name}/src/generated/java/META-INF" quiet="true"/>

            <!-- Copy license -->
            <copy todir="${release}/${module}">
                <fileset dir="${module.lwjgl}/@{name}" includes="@{license}*"/>
            </copy>
        </sequential>
    </macrodef>

    <target name="-check-release-jdk">
        <fail message="The JAVA8_HOME environment variable is not set." if:set="jdk9">
            <condition>
                <not><isset property="env.JAVA8_HOME"/></not>
            </condition>
        </fail>

        <local name="input"/>
        <input
            message="It is recommended to build LWJGL releases on JDK 9 or higher. Continue with JDK 8?"
            validargs="y,n"
            defaultvalue="n"
            addproperty="input"
            unless:set="jdk9"
        />
        <fail message="Cancelled" unless:set="jdk9">
            <condition>
                <equals arg1="n" arg2="${input}"/>
            </condition>
        </fail>
    </target>

    <target name="release" depends="-check-release-jdk,clean-java,compile,-build-version">
        <local name="revision"/>
        <condition property="revision" value="build ${build.revision}" else="SNAPSHOT">
            <isset property="build.revision"/>
        </condition>

        <delete dir="${release}"/>
        <mkdir dir="${release}"/>

        <!-- Copy license -->
        <copy file="LICENSE.md" tofile="${release}/LICENSE"/>

        <!-- Generate build.txt -->
        <echo file="${release}/build.txt" if:set="build.revision">LWJGL ${build.version} ${revision}</echo>
        <echo file="${release}/build.txt" unless:set="build.revision">LWJGL ${build.version}</echo>

        <!-- Generate module-info classes -->
        <java
            classpath="bin/classes/generator"
            classname="org.lwjgl.generator.util.ModuleInfoGen"
            failonerror="true"
            taskname="module-info-gen"
            if:set="jdk9"
        >
            <arg value="${module.list}"/>
            <arg value="${module.list.java-only}"/>
        </java>

        <parallel threadcount="4" failonany="true">

        <!-- CORE -->
        <copy todir="${module.lwjgl}/core/src/generated/java/META-INF/versions/9" if:set="jdk9">
            <fileset dir="${module.lwjgl}/core/src/main/java9" includes="**"/>
        </copy>
        <release-module package="org.lwjgl" name="core" native-library="lwjgl" license="dyncall" title="Core"/>

        <!-- Assimp -->
        <release-module package="org.lwjgl.assimp" name="assimp" native-library="assimp" title="assimp" if:true="${binding.assimp}"/>

        <!-- bgfx -->
        <release-module package="org.lwjgl.bgfx" name="bgfx" native-library="bgfx" title="bgfx" if:true="${binding.bgfx}"/>

        <!-- EGL -->
        <release-module package="org.lwjgl.egl" name="egl" title="EGL" license="khronos" if:true="${binding.egl}"/>

        <!-- GLFW -->
        <release-module package="org.lwjgl.glfw" name="glfw" title="GLFW" if:true="${binding.glfw}">
            <natives>
                <get-release url="linux/x64/libglfw.so"/>
                <get-release url="linux/x64/libglfw_wayland.so"/>
                <get-release url="macosx/x64/libglfw.dylib"/>
                <get-release url="windows/x64/glfw.dll"/>
                <get-release url="windows/x86/glfw32.dll"/>

                <get-release url="linux/x64/libglfw.so.git"/>
                <get-release url="linux/x64/libglfw_wayland.so.git"/>
                <get-release url="macosx/x64/libglfw.dylib.git"/>
                <get-release url="windows/x64/glfw.dll.git"/>
                <get-release url="windows/x86/glfw32.dll.git"/>
            </natives>
        </release-module>

        <!-- JAWT -->
        <release-module package="org.lwjgl.system.jawt" name="jawt" title="JAWT" if:true="${binding.jawt}"/>

        <!-- jemalloc -->
        <release-module package="org.lwjgl.system.jemalloc" name="jemalloc" native-library="jemalloc" title="jemalloc" if:true="${binding.jemalloc}"/>

        <!-- LMDB -->
        <release-module package="org.lwjgl.util.lmdb" name="lmdb" native-library="lwjgl_lmdb" title="LMDB" if:true="${binding.lmdb}"/>

        <!-- lz4 -->
        <release-module package="org.lwjgl.util.lz4" name="lz4" native-library="lwjgl_lz4" title="lz4" if:true="${binding.lz4}"/>

        <!-- NanoVG -->
        <release-module package="org.lwjgl.nanovg" name="nanovg" native-library="lwjgl_nanovg" title="NanoVG" license="nano" if:true="${binding.nanovg}"/>

        <!-- Native File Dialog -->
        <release-module package="org.lwjgl.util.nfd" name="nfd" native-library="lwjgl_nfd" title="Native File Dialog" if:true="${binding.nfd}"/>

        <!-- Nuklear -->
        <release-module package="org.lwjgl.nuklear" name="nuklear" native-library="lwjgl_nuklear" title="Nuklear" if:true="${binding.nuklear}"/>

        <!-- ODBC -->
        <release-module package="org.lwjgl.odbc" name="odbc" title="ODBC" if:true="${binding.odbc}"/>

        <!-- OpenAL -->
        <release-module package="org.lwjgl.openal" name="openal" title="OpenAL" if:true="${binding.openal}">
            <natives>
                <get-release url="linux/x64/libopenal.so"/>
                <get-release url="macosx/x64/libopenal.dylib"/>
                <get-release url="windows/x64/OpenAL.dll"/>
                <get-release url="windows/x86/OpenAL32.dll"/>

                <get-release url="linux/x64/libopenal.so.git"/>
                <get-release url="macosx/x64/libopenal.dylib.git"/>
                <get-release url="windows/x64/OpenAL.dll.git"/>
                <get-release url="windows/x86/OpenAL32.dll.git"/>
            </natives>
        </release-module>

        <!-- OpenCL -->
        <release-module package="org.lwjgl.opencl" name="opencl" title="OpenCL" license="khronos" if:true="${binding.opencl}"/>

        <!-- OpenGL -->
        <release-module package="org.lwjgl.opengl" name="opengl" native-library="lwjgl_opengl" title="OpenGL" license="khronos" if:true="${binding.opengl}"/>

        <!-- OpenGL ES -->
        <release-module package="org.lwjgl.opengles" name="opengles" native-library="lwjgl_opengles" title="OpenGL ES" license="khronos" if:true="${binding.opengles}"/>

        <!-- OpenVR -->
        <release-module package="org.lwjgl.openvr" name="openvr" title="OpenVR" if:true="${binding.openvr}">
            <natives>
                <get-release url="linux/x64/liblwjgl_openvr.so"/>
                <get-release url="macosx/x64/liblwjgl_openvr.dylib"/>
                <get-release url="windows/x64/lwjgl_openvr.dll"/>
                <get-release url="windows/x86/lwjgl_openvr32.dll"/>

                <get-release url="linux/x64/libopenvr_api.so"/>
                <get-release url="macosx/x64/libopenvr_api.dylib"/>
                <get-release url="windows/x64/openvr_api.dll"/>
                <get-release url="windows/x86/openvr_api32.dll"/>

                <get-release url="linux/x64/libopenvr_api.so.git"/>
                <get-release url="macosx/x64/libopenvr_api.dylib.git"/>
                <get-release url="windows/x64/openvr_api.dll.git"/>
                <get-release url="windows/x86/openvr_api32.dll.git"/>
            </natives>
        </release-module>

        <!-- LibOVR -->
        <release-module package="org.lwjgl.ovr" name="ovr" title="LibOVR" license="oculus" if:true="${binding.ovr}">
            <natives>
                <get-release url="windows/x64/lwjgl_ovr.dll"/>
                <get-release url="windows/x86/lwjgl_ovr32.dll"/>
            </natives>
        </release-module>

        <!-- Par -->
        <release-module package="org.lwjgl.util.par" name="par" native-library="lwjgl_par" title="par" if:true="${binding.par}"/>

        <!-- Remotery -->
        <release-module package="org.lwjgl.util.remotery" name="remotery" native-library="lwjgl_remotery" title="remotery" if:true="${binding.remotery}"/>

        <!-- rpmalloc -->
        <release-module package="org.lwjgl.system.rpmalloc" name="rpmalloc" native-library="lwjgl_rpmalloc" title="rpmalloc" if:true="${binding.rpmalloc}"/>

        <!-- SSE -->
        <release-module package="org.lwjgl.util.simd" name="sse" native-library="lwjgl_sse" title="SSE" if:true="${binding.sse}"/>

        <!-- stb -->
        <release-module package="org.lwjgl.stb" name="stb" native-library="lwjgl_stb" title="stb" if:true="${binding.stb}"/>

        <!-- Tiny OpenEXR -->
        <release-module package="org.lwjgl.util.tinyexr" name="tinyexr" native-library="lwjgl_tinyexr" title="Tiny OpenEXR" if:true="${binding.tinyexr}"/>

        <!-- tiny file dialogs -->
        <release-module package="org.lwjgl.util.tinyfd" name="tinyfd" native-library="lwjgl_tinyfd" title="tiny file dialogs" if:true="${binding.tinyfd}"/>

        <!-- AMD Tootle -->
        <release-module package="org.lwjgl.util.tootle" name="tootle" native-library="lwjgl_tootle" title="tootle" if:true="${binding.tootle}"/>

        <!-- Vulkan Memory Allocator -->
        <release-module package="org.lwjgl.util.vma" name="vma" native-library="lwjgl_vma" title="vma" if:true="${binding.vma}"/>

        <!-- Vulkan -->
        <release-module package="org.lwjgl.vulkan" name="vulkan" title="Vulkan" license="khronos" if:true="${binding.vulkan}">
            <natives>
                <get-release url="macosx/x64/libMoltenVK.dylib"/>
                <get-release url="macosx/x64/libMoltenVK.dylib.git"/>
            </natives>
        </release-module>

        <!-- xxHash -->
        <release-module package="org.lwjgl.util.xxhash" name="xxhash" native-library="lwjgl_xxhash" title="xxHash" if:true="${binding.xxhash}"/>

        <!-- yoga -->
        <release-module package="org.lwjgl.util.yoga" name="yoga" native-library="lwjgl_yoga" title="yoga" if:true="${binding.yoga}"/>

        <!-- zstd -->
        <release-module package="org.lwjgl.util.zstd" name="zstd" native-library="lwjgl_zstd" title="zstd" if:true="${binding.zstd}"/>

        </parallel>
    </target>
</project>
