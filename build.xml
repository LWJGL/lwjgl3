<project name="LWJGL" basedir="." default="all" xmlns:if="ant:if" xmlns:unless="ant:unless">

	<property name="build.sysclasspath" value="ignore"/>

	<property name="config" location="config" relative="true"/>

	<import file="${config}/build-definitions.xml" id="defs"/>

	<!-- Initialize build -->
	<target name="init" description="Initializes the directories required by the build process">
		<!-- These depend on LWJGL_BUILD_OUTPUT and may be symlinks -->
		<mkdir-symlink dir="bin"/>
		<mkdir-symlink dir="generated"/>
		<mkdir-symlink dir="release"/>

		<mkdir dir="${bin.core}"/>
		<mkdir dir="${bin.util}"/>
		<mkdir dir="${bin.templates}"/>
		<mkdir dir="${bin.tests}"/>
		<mkdir dir="${bin.native}"/>

		<ant antfile="update-dependencies.xml" target="check-dependencies" inheritAll="false"/>

		<!--<taskdef resource="org/jetbrains/kotlin/buildtools/ant/antlib.xml" classpath="${kotlinc}/lib/kotlin-ant.jar"/>-->
		<taskdef resource="testngtasks" classpath="libs/testng.jar"/>
	</target>

	<target name="init-generated" description="Initializes the lwjgl3-generated git repository in /generated. [Optional]">
		<local name="replace.input"/>
		<input
			message="The /generated directory contents will be replaced with a fresh clone of the lwjgl3-generated repository. Continue?"
			validargs="y,n"
			defaultvalue="n"
			addproperty="replace.input"
			/>
		<condition property="replace.generated">
			<equals arg1="y" arg2="${replace.input}"/>
		</condition>
		<fail unless="replace.generated">Cancelled</fail>

		<!-- Purge /generated contents -->
		<antcall target="remove-generated"/>
		<mkdir-symlink dir="generated"/>

		<!-- Clone repo -->
		<exec executable="git" failonerror="true">
			<arg value="clone"/>
			<arg value="https://github.com/LWJGL/lwjgl3-generated.git"/>
			<arg value="generated"/>
		</exec>
	</target>

	<target name="remove-generated" description="Removes the /generated directory.">
		<delete-symlink dir="generated"/>
	</target>

	<target name="clean" description="Cleans all directories controlled by this script" depends="clean-java, clean-native, clean-templates, clean-generated">
		<delete-symlink dir="bin"/>
		<!-- Do not delete /generated, it may contain the lwjgl3-generated git repo -->
		<delete-symlink dir="release"/>
		<echo message="Cleanup successful. To also remove the /generated directory, run the  remove-generated  target."/>
	</target>

	<target name="clean-java" description="Deletes Java binary files produced by this script">
		<delete dir="${bin.core}"/>
		<delete dir="${bin.util}"/>
		<delete dir="${bin.tests}"/>
	</target>

	<target name="clean-native" description="Deletes native binary files produced by this script">
		<delete dir="${bin.native}"/>
	</target>

	<target name="clean-templates" description="Deletes template binary files produced by this script">
		<delete dir="${bin.templates}"/>
	</target>

	<target name="clean-generated" description="Deletes sources, test results and documentation generated by this script" depends="clean-generated-java,clean-generated-native">
		<delete dir="${generated.tests}"/>
		<delete dir="${generated.javadoc}"/>
	</target>

	<target name="clean-generated-java" description="Deletes Java sources generated by this script">
		<delete file="${generated}/touch.txt" quiet="true"/>
		<delete dir="${generated.java}"/>
	</target>

	<target name="clean-generated-native" description="Deletes native sources generated by this script">
		<delete file="${generated}/touch.txt" quiet="true"/>
		<delete dir="${generated.native}"/>
	</target>

	<target name="all" description="Build LWJGL and runs the tests" depends="compile-templates,tests"/>

	<target name="-init-compile" description="Initializes properties required for compilation">
		<condition property="java.home.missing">
			<not>
				<or>
					<isset property="env.JAVA_HOME"/>
					<isset property="env.JAVA6_HOME"/>
				</or>
			</not>
		</condition>
		<fail if="java.home.missing" message="Please set the JAVA_HOME environment variable."/>
		<!--
			JAVA6_HOME will be used for the bootclasspath. This will cause compilation to fail
			if a Java 7+ API is used by mistake. Do not fail if it is not set, try to use
			JAVA_HOME instead and issue a warning if that's not a Java 6 SDK.
		-->
		<sequential>
		<script language="javascript">
		if ( !java.lang.System.getenv().containsKey("JAVA6_HOME") ) {
			var version = java.lang.System.getProperty("java.specification.version");
			if ( !version.equals("1.6") )
				print("The environment variable JAVA6_HOME has not been set. Using JAVA_HOME (version " + version + ").");
		}
		</script>
		</sequential>
		<property name="env.JAVA6_HOME" value="${env.JAVA_HOME}" unless:set="env.JAVA6_HOME"/>

		<path id="jdk.boot.classpath.jars">
			<fileset dir="${env.JAVA6_HOME}/jre/lib">
				<include name="*.jar"/>
			</fileset>
			<fileset file="${env.JAVA6_HOME}/lib/tools.jar"/>
		</path>
		<path id="jdk.boot.classpath.applejars">
			<fileset dir="${env.JAVA6_HOME}/bundle/Classes">
				<include name="*.jar"/>
			</fileset>
		</path>
		<condition property="jdk.boot.classpath" value="jdk.boot.classpath.applejars" else="jdk.boot.classpath.jars">
			<available file="${env.JAVA6_HOME}/bundle/Classes/classes.jar"/>
		</condition>
	</target>

	<target name="compile-templates" description="Compiles the Templates module" depends="init">
		<uptodate targetfile="${bin}/Templates/touch.txt" property="templates-uptodate">
			<srcfiles dir="${src.templates}" includes="**" />
		</uptodate>
		<antcall target="-compile-templates"/>
	</target>

	<target name="-compile-templates" description="Compiles the Templates module" depends="-init-compile" unless="templates-uptodate">
		<!-- Compile Java dependencies -->
		<javac debug="yes" destdir="${bin}/Templates" encoding="utf8" source="1.6" target="1.6" bootclasspathref="${jdk.boot.classpath}" taskname="Java dependencies">
			<src path="${src.templates}"/>
			<include name="org/lwjgl/**"/>
		</javac>

		<!-- Compile Kotlin code -->
		<echo message="Compiling Kotlin templates. This will take several seconds..." level="info" taskname="Templates"/>
		<java
			classpath="${kotlinc}/lib/kotlin-preloader.jar"
			classname="org.jetbrains.kotlin.preloading.Preloader"
			fork="true" failonerror="true" taskname="Templates"
			>
			<jvmarg value="-server"/>
			<jvmarg value="-Xms1024m"/>
			<jvmarg value="-Xverify:none"/>

			<jvmarg value="-Dorg.lwjgl.templates.output=${bin.templates}"/>

			<arg line="${kotlinc}/lib/kotlin-compiler.jar${path.separator}${kotlinc}/lib/kotlin-runtime.jar"/>
			<arg line="org.jetbrains.kotlin.cli.jvm.K2JVMCompiler 4096 notime"/>

			<arg line="-module ${config}/Templates.ktm"/>
			<!--
			<arg value="-Xno-call-assertions"/>
			<arg value="-Xno-param-assertions"/>
			-->
		</java>

		<touch file="${bin.templates}/touch.txt"/>
	</target>

	<target name="formatter" description="Runs the template formatter tool" depends="init, -init-compile"> <!-- Removed "compile-templates" until Kotlin adds support for incremental compilation -->
		<javac debug="yes" destdir="${bin.templates}" encoding="utf8" source="1.6" target="1.6" bootclasspathref="${jdk.boot.classpath}">
			<src path="${src.templates}"/>
			<include name="org/lwjgl/**"/>
		</javac>

		<java
			classname="org.lwjgl.generator.util.TemplateFormatter"
			fork="true"
			spawn="true"
			>
			<classpath>
				<pathelement path="${bin.templates}"/>
				<pathelement path="${res}"/>
			</classpath>
		</java>
	</target>

	<target name="generate" description="Runs the bindings Generator" depends="init">
		<available file="${bin.templates}/touch.txt" property="has-compiled-templates"/>
		<fail unless="has-compiled-templates" message="Please invoke the compile-templates target first."/>

		<uptodate property="generated-uptodate" targetfile="${generated}/touch.txt">
			<srcfiles dir="${bin.templates}" includes="**/*.class"/>
		</uptodate>
		<antcall target="-generate"/>
	</target>

	<target name="-generate" description="Runs the code Generator" unless="generated-uptodate">
		<java
			classname="org.lwjgl.generator.GeneratorPackage"
			fork="true"
			failonerror="true"
			taskname="Generator"
			>
			<classpath>
				<pathelement path="${bin.templates}"/>
				<pathelement path="${kotlinc}/lib/kotlin-runtime.jar"/>
			</classpath>

			<jvmarg value="-server"/>

			<arg value="${src.templates}"/>
			<arg value="${generated}"/>
		</java>

		<touch file="${generated}/touch.txt" verbose="false"/>
	</target>

	<target name="compile" description="Compiles the Java source code" depends="generate, -init-compile">
		<javac debug="yes" destdir="${bin.core}" encoding="utf8" source="1.6" target="1.6" bootclasspathref="${jdk.boot.classpath}" taskname="Core">
			<src>
				<pathelement path="${src.core}"/>
				<pathelement path="${src.util}"/>
				<pathelement path="${generated.java}"/>
			</src>

			<!-- Supresses internal API (e.g. Unsafe) usage warnings -->
			<compilerarg value="-XDignore.symbol.file=true"/>
		</javac>
	</target>

	<target name="compile-native" description="Compiles the native source code" depends="init, compile">
		<ant antfile="${config}/${platform}/build.xml" inheritAll="false"/>
	</target>

	<target name="compile-tests" description="Compiles the LWJGL test suite" depends="compile">
		<javac debug="yes" destdir="${bin.tests}" encoding="utf8" source="1.6" target="1.6" bootclasspathref="${jdk.boot.classpath}" taskname="Tests">
			<classpath>
				<pathelement path="${bin.core}"/>
				<pathelement path="${bin.util}"/>
				<pathelement path="${lib}/testng.jar"/>
			</classpath>

			<src path="${src.tests}/"/>
		</javac>
	</target>

	<target name="-init-runtime" description="Initializes properties required for running demos and tests">
		<path id="library.path">
			<pathelement path="${bin}"/>
			<pathelement path="${lib}"/>
		</path>
		<property name="library.path" refid="library.path"/>

		<path id="runtime.classpath">
			<pathelement path="${bin.core}"/>
			<pathelement path="${bin.util}"/>
			<pathelement path="${res}"/>
			<pathelement path="${bin.tests}"/>
		</path>
	</target>

	<target name="tests" description="Runs the LWJGL test suite" depends="compile-tests, compile-native, -init-runtime">
		<testng outputDir="${generated.tests}" classpathref="runtime.classpath" taskname="Tests">
			<classpath>
				<pathelement path="${lib}/jcommander.jar"/>
			</classpath>

			<jvmarg value="-Xcheck:jni"/>
			<jvmarg value="-ea"/>
			<jvmarg value="-Dorg.lwjgl.util.Debug=true"/>
			<jvmarg value="-Djava.library.path=${library.path}"/>
			<jvmarg value="-XstartOnFirstThread" if:set="platform.macosx"/>

			<xmlfileset dir="${config}" includes="tests.xml,tests_${platform}.xml"/>
		</testng>
	</target>

	<target name="demo" description="Runs an LWJGL demo" depends="-init-runtime">
		<fail message="Please use -Dclass=&lt;class&gt; to specify the demo main class to run." unless="class"/>

		<java classname="${class}" classpathref="runtime.classpath" fork="true" failonerror="true" taskname="Demo">
			<classpath>
				<pathelement path="${lib}/testng.jar"/>
			</classpath>

			<jvmarg value="-Djava.library.path=${library.path}"/>
			<jvmarg value="-XstartOnFirstThread" if:set="platform.macosx"/>
			<jvmarg line="${jvmargs}" if:set="jvmargs"/>

			<arg line="${args}" if:set="args"/>
		</java>
	</target>

	<target name="javadoc" description="Generates the LWJGL JavaDoc" depends="generate">
		<uptodate targetfile="${generated.javadoc}/index.html" property="javadoc-uptodate">
			<srcfiles dir="${src.core}" includes="**"/>
			<srcfiles dir="${generated.java}" includes="**"/>
		</uptodate>
		<antcall target="-javadoc"/>
	</target>

	<target name="-javadoc" description="Generates the LWJGL JavaDoc" depends="-init-compile" unless="javadoc-uptodate">
		<delete dir="${generated.javadoc}"/>
		<javadoc
			destdir="${generated.javadoc}"
			source="1.6"
			bootclasspathref="${jdk.boot.classpath}"
			windowtitle="LWJGL ${build.version}"
			encoding="utf8"
			docencoding="utf8"
			useexternalfile="true"
			nohelp="true"
			notree="true"
		    stylesheetfile="${config}/javadoc.css"
		    doclet="org.lwjgl.system.ExcludeDoclet"
		    docletpath="${bin.templates}"
			>

			<!-- TODO: Add package-info documentation -->

			<doctitle><![CDATA[<h1>Lightweight Java Game Library</h1>]]></doctitle>
			<bottom><![CDATA[<i>Copyright LWJGL. All Rights Reserved. <a href="http://lwjgl.org/license.php">License terms</a>.</i>]]></bottom>

			<fileset dir="${src.core}" includes="**"/>
			<fileset dir="${src.util}" includes="**"/>
			<fileset dir="${generated.java}" includes="**"/>
		</javadoc>
	</target>

	<target name="release" description="" depends="compile,javadoc">

		<taskdef resource="aQute/bnd/ant/taskdef.properties" classpath="${lib}/bnd.jar"/>

		<mkdir dir="${release.jar}"/>

		<!-- Bundle classes -->
		<jar destfile="${release.jar}/lwjgl.jar" basedir="${bin.core}" includes="**" level="9" index="true"/>

		<!-- Download binaries from build.lwjgl.org -->
		<mkdir dir="${release.native}/windows/x64"/>
		<mkdir dir="${release.native}/windows/x86"/>
		<update name="LWJGL Win64" url="http://build.lwjgl.org/${build.type}/windows/x64/lwjgl.dll" dest="${release.native}/windows/x64"/>
		<update name="LWJGL Win32" url="http://build.lwjgl.org/${build.type}/windows/x86/lwjgl.dll" dest="${release.native}/windows/x86"/>
		<update name="OpenAL32 Win64" url="http://build.lwjgl.org/${build.type}/windows/x64/OpenAL32.dll" dest="${release.native}/windows/x64"/>
		<update name="OpenAL32 Win32" url="http://build.lwjgl.org/${build.type}/windows/x86/OpenAL32.dll" dest="${release.native}/windows/x86"/>

		<mkdir dir="${release.native}/linux/x64"/>
		<mkdir dir="${release.native}/linux/x86"/>
		<update name="LWJGL Linux64" url="http://build.lwjgl.org/${build.type}/linux/x64/liblwjgl.so" dest="${release.native}/linux/x64"/>
		<update name="LWJGL Linux32" url="http://build.lwjgl.org/${build.type}/linux/x86/liblwjgl.so" dest="${release.native}/linux/x86"/>
		<update name="OpenAL32 Linux64" url="http://build.lwjgl.org/${build.type}/linux/x64/libopenal.so" dest="${release.native}/linux/x64"/>
		<update name="OpenAL32 Linux32" url="http://build.lwjgl.org/${build.type}/linux/x64/libopenal.so" dest="${release.native}/linux/x86"/>

		<mkdir dir="${release.native}/macosx/x64"/>
		<update name="LWJGL OSX" url="http://build.lwjgl.org/${build.type}/macosx/x64/liblwjgl.dylib" dest="${release.native}/macosx/x64"/>
		<update name="OpenAL32 OSX" url="http://build.lwjgl.org/${build.type}/macosx/x64/libopenal.dylib" dest="${release.native}/macosx/x64"/>

		<!-- Bundle javadoc -->
		<mkdir dir="${release.doc}"/>
		<zip destfile="${release.doc}/javadoc.zip" basedir="${generated.javadoc}" includes="**" level="9" />

		<!-- Copy license files -->
		<copy todir="${release.doc}">
			<fileset dir="${doc}" includes="LICENSE.txt"/>
			<fileset dir="${doc}" includes="3rdparty/**"/>
		</copy>

		<!-- Bundle source -->
		<zip destfile="${release}/src.zip" level="9">
			<fileset dir="${src.core}" includes="**"/>
			<fileset dir="${generated.java}" includes="**"/>
		</zip>

        <bnd classpath="${bin.core}"
             exceptions="true"
             files="${config}/bnd/default.bnd"
             output="${release.jar}/lwjgl-bundle-${build.version}.jar">
        </bnd>
	</target>
</project>