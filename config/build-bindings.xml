<!--
  ~ Copyright LWJGL. All rights reserved.
  ~ License terms: https://www.lwjgl.org/license
  -->

<!--
Defines which library bindings will be build with LWJGL.

This script is included in /config/build-definitions.xml.
-->
<project name="bindings" basedir="../" xmlns:if="ant:if" xmlns:unless="ant:unless">

    <property name="binding.DISABLE_CHECKS" value="false"/>

    <!-- // ========== BINDING FLAGS ======== // -->

    <local name="notARM"/>
    <condition property="notARM">
        <or>
            <isset property="build.arch.x64"/>
            <isset property="build.arch.x86"/>
        </or>
    </condition>

    <property name="binding.assimp" value="true"/>
    <property name="binding.bgfx" value="true"/>
    <property name="binding.bullet" value="true"/>
    <property name="binding.cuda" value="true"/>
    <property name="binding.egl" value="true"/>
    <property name="binding.glfw" value="true"/>
    <property name="binding.jawt" value="true"/>
    <property name="binding.jemalloc" value="true"/>
    <property name="binding.libdivide" value="true"/>
    <property name="binding.llvm" value="true"/>
    <property name="binding.lmdb" value="true"/>
    <property name="binding.lz4" value="true"/>
    <condition property="binding.meow" value="true" else="false">
        <or>
            <isset property="notARM"/>
            <isset property="build.arch.arm64"/>
        </or>
    </condition>
    <property name="binding.meshoptimizer" value="true"/>
    <property name="binding.nanovg" value="true"/>
    <condition property="binding.nfd" value="true" else="false"><isset property="notARM"/></condition>
    <property name="binding.nuklear" value="true"/>
    <property name="binding.odbc" value="true"/>
    <property name="binding.openal" value="true"/>
    <property name="binding.opencl" value="true"/>
    <property name="binding.opengl" value="true"/>
    <property name="binding.opengles" value="true"/>
    <condition property="binding.openvr" value="true" else="false"><isset property="notARM"/></condition>
    <property name="binding.opus" value="true"/>
    <property name="binding.par" value="true"/>
    <property name="binding.remotery" value="true"/>
    <property name="binding.rpmalloc" value="true"/>
    <property name="binding.shaderc" value="true"/>
    <property name="binding.spvc" value="true"/>
    <condition property="binding.sse" value="true" else="false"><isset property="notARM"/></condition>
    <property name="binding.stb" value="true"/>
    <property name="binding.tinyexr" value="true"/>
    <property name="binding.tinyfd" value="true"/>
    <condition property="binding.tootle" value="true" else="false"><isset property="notARM"/></condition>
    <property name="binding.vma" value="true"/>
    <property name="binding.vulkan" value="true"/>
    <property name="binding.xxhash" value="true"/>
    <property name="binding.yoga" value="true"/>
    <property name="binding.zstd" value="true"/>

    <!-- TODO: automate -->
    <property name="java-only.binding.cuda" value="true"/>
    <property name="java-only.binding.egl" value="true"/>
    <property name="java-only.binding.jawt" value="true"/>
    <property name="java-only.binding.odbc" value="true"/>
    <property name="java-only.binding.opencl" value="true"/>

    <!-- Set the path to the Oculus SDK to enable. -->
    <!-- TODO: add headers in here -->
    <property name="OCULUS_SDK_PATH" location="../OculusSDK" relative="false"/>

    <!-- // ================================ // -->

    <target name="bindings">
        <condition property="binding.ovr" value="true" else="false">
            <and>
                <isset property="OCULUS_SDK_PATH"/>
                <available file="${OCULUS_SDK_PATH}/LibOVR/Include/OVR_CAPI.h"/>
            </and>
        </condition>

        <local name="dependency_problem"/>
        <condition property="dependency_problem" value="1">
            <and>
                <istrue value="${binding.ovr}"/>

                <and>
                    <isfalse value="${binding.opengl}"/>
                    <isfalse value="${binding.vulkan}"/>
                </and>
            </and>
        </condition>
        <fail if="dependency_problem" message="The OpenGL or Vulkan bindings are required."/>

        <condition property="dependency_problem" value="1">
            <and>
                <istrue value="${binding.nanovg}"/>
                <or>
                    <isfalse value="${binding.stb}"/>
                    <and>
                        <isfalse value="${binding.bgfx}"/>
                        <isfalse value="${binding.opengl}"/>
                        <isfalse value="${binding.opengles}"/>
                    </and>
                </or>
            </and>
        </condition>
        <fail if="dependency_problem" message="The stb and OpenGL or OpenGL ES bindings are required."/>

        <script language="javascript">
        var props = LWJGL.getProperties();

        var modules = ["core"];
        var bindings = ["-Dbinding.DISABLE_CHECKS=" + props.get("binding.DISABLE_CHECKS")];

        for each (p in props.entrySet()) {
            var name = p.key;
            if (name.startsWith("binding.") &amp;&amp; p.value == "true") {
                var module = name.substring(8);

                modules.push(module);
                bindings.push("-D" + name + "=true");
            }
        }

        LWJGL.setProperty("binding.core", "true");
        LWJGL.setProperty("generator.bindings", bindings.join(" "));
        LWJGL.setProperty("module.list", modules.join(","));

        var classes = [];
        var templates = [];
        var sources = [];

        modules.forEach(function(it) {
            LWJGL.setProperty("module." + it + ".path", it == "core" ? "org/lwjgl" : "org/lwjgl/" + it);

            classes.push("bin/classes/lwjgl/" + it);

            var src = "modules/lwjgl/" + it + "/src";

            templates.push(src + "/templates/kotlin");
            sources.push(src + "/generated/java");
            if (java.nio.file.Files.isDirectory(java.nio.file.Paths.get(src + "/main/java"))) {
                sources.push(src + "/main/java");
            }
        });

        LWJGL.setProperty("module.classpath", classes.join(java.io.File.pathSeparator));
        LWJGL.setProperty("module.templatepath", templates.join(java.io.File.pathSeparator));
        LWJGL.setProperty("module.sourcepath", sources.join(java.io.File.pathSeparator));
        </script>
    </target>

    <macrodef name="forEachBinding">
        <element name="body" implicit="yes"/>
        <sequential>
            <parallel threadsPerProcessor="1">
                <sequential if:true="${binding.assimp}"><local name="module"/><property name="module" value="assimp"/><body/></sequential>
                <sequential if:true="${binding.bullet}"><local name="module"/><property name="module" value="bullet"/><body/></sequential>
                <sequential if:true="${binding.bgfx}"><local name="module"/><property name="module" value="bgfx"/><body/></sequential>
                <sequential if:true="${binding.cuda}"><local name="module"/><property name="module" value="cuda"/><body/></sequential>
                <sequential if:true="${binding.egl}"><local name="module"/><property name="module" value="egl"/><body/></sequential>
                <sequential if:true="${binding.glfw}"><local name="module"/><property name="module" value="glfw"/><body/></sequential>
                <sequential if:true="${binding.jawt}"><local name="module"/><property name="module" value="jawt"/><body/></sequential>
                <sequential if:true="${binding.jemalloc}"><local name="module"/><property name="module" value="jemalloc"/><body/></sequential>
                <sequential if:true="${binding.libdivide}"><local name="module"/><property name="module" value="libdivide"/><body/></sequential>
                <sequential if:true="${binding.llvm}"><local name="module"/><property name="module" value="llvm"/><body/></sequential>
                <sequential if:true="${binding.lmdb}"><local name="module"/><property name="module" value="lmdb"/><body/></sequential>
                <sequential if:true="${binding.lz4}"><local name="module"/><property name="module" value="lz4"/><body/></sequential>
                <sequential if:true="${binding.meow}"><local name="module"/><property name="module" value="meow"/><body/></sequential>
                <sequential if:true="${binding.meshoptimizer}"><local name="module"/><property name="module" value="meshoptimizer"/><body/></sequential>
                <sequential if:true="${binding.nanovg}"><local name="module"/><property name="module" value="nanovg"/><body/></sequential>
                <sequential if:true="${binding.nfd}"><local name="module"/><property name="module" value="nfd"/><body/></sequential>
                <sequential if:true="${binding.nuklear}"><local name="module"/><property name="module" value="nuklear"/><body/></sequential>
                <sequential if:true="${binding.odbc}"><local name="module"/><property name="module" value="odbc"/><body/></sequential>
                <sequential if:true="${binding.openal}"><local name="module"/><property name="module" value="openal"/><body/></sequential>
                <sequential if:true="${binding.opencl}"><local name="module"/><property name="module" value="opencl"/><body/></sequential>
                <sequential if:true="${binding.opengl}"><local name="module"/><property name="module" value="opengl"/><body/></sequential>
                <sequential if:true="${binding.opengles}"><local name="module"/><property name="module" value="opengles"/><body/></sequential>
                <sequential if:true="${binding.openvr}"><local name="module"/><property name="module" value="openvr"/><body/></sequential>
                <sequential if:true="${binding.opus}"><local name="module"/><property name="module" value="opus"/><body/></sequential>
                <sequential if:true="${binding.ovr}"><local name="module"/><property name="module" value="ovr"/><body/></sequential>
                <sequential if:true="${binding.par}"><local name="module"/><property name="module" value="par"/><body/></sequential>
                <sequential if:true="${binding.remotery}"><local name="module"/><property name="module" value="remotery"/><body/></sequential>
                <sequential if:true="${binding.rpmalloc}"><local name="module"/><property name="module" value="rpmalloc"/><body/></sequential>
                <sequential if:true="${binding.shaderc}"><local name="module"/><property name="module" value="shaderc"/><body/></sequential>
                <sequential if:true="${binding.spvc}"><local name="module"/><property name="module" value="spvc"/><body/></sequential>
                <sequential if:true="${binding.sse}"><local name="module"/><property name="module" value="sse"/><body/></sequential>
                <sequential if:true="${binding.stb}"><local name="module"/><property name="module" value="stb"/><body/></sequential>
                <sequential if:true="${binding.tinyexr}"><local name="module"/><property name="module" value="tinyexr"/><body/></sequential>
                <sequential if:true="${binding.tinyfd}"><local name="module"/><property name="module" value="tinyfd"/><body/></sequential>
                <sequential if:true="${binding.tootle}"><local name="module"/><property name="module" value="tootle"/><body/></sequential>
                <sequential if:true="${binding.vma}"><local name="module"/><property name="module" value="vma"/><body/></sequential>
                <sequential if:true="${binding.vulkan}"><local name="module"/><property name="module" value="vulkan"/><body/></sequential>
                <sequential if:true="${binding.xxhash}"><local name="module"/><property name="module" value="xxhash"/><body/></sequential>
                <sequential if:true="${binding.yoga}"><local name="module"/><property name="module" value="yoga"/><body/></sequential>
                <sequential if:true="${binding.zstd}"><local name="module"/><property name="module" value="zstd"/><body/></sequential>
            </parallel>
        </sequential>
    </macrodef>

    <macrodef name="forEachModule">
        <element name="body" implicit="yes"/>
        <sequential>
            <sequential>
                <local name="module"/><property name="module" value="core"/>
                <body/>
            </sequential>
            <forEachBinding>
                <body/>
            </forEachBinding>
        </sequential>
    </macrodef>

</project>
