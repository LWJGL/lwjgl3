<!--
  ~ Copyright LWJGL. All rights reserved.
  ~ License terms: https://www.lwjgl.org/license
  -->
<project name="native-windows" basedir="../.." xmlns:if="ant:if" xmlns:unless="ant:unless">
    <import file="../build-definitions.xml"/>

    <condition property="LIB_POSTFIX" value="" else="32">
        <equals arg1="${build.arch}" arg2="x64"/>
    </condition>

    <macrodef name="compile">
        <attribute name="dest" default="${dest}"/>
        <attribute name="flags" default=""/>
        <attribute name="simple" default="false"/>
        <attribute name="relative" default="true"/>
        <element name="source" implicit="true" optional="true"/>
        <sequential>
            <mkdir dir="@{dest}"/>
            <apply executable="cl" dest="@{dest}" skipemptyfilesets="true" failonerror="true" relative="@{relative}" parallel="true" taskname="Compiler">
                <arg line="/c @{flags} /EHsc /O2 /GL /GR- /GS- /MT /MP /nologo /DNDEBUG /DLWJGL_WINDOWS /DLWJGL_${build.arch}"/>

                <arg value="/Fo@{dest}\"/>

                <arg value="/I${jni.headers}"/>
                <arg value="/I${jni.headers}\win32"/>

                <arg value="/I${module.lwjgl}\core\src\main\c"/>
                <arg value="/I${module.lwjgl}\core\src\main\c\${platform}"/>

                <arg value="/I${src.main}" if:true="@{simple}"/>

                <source/>
                <fileset dir="." includes="${src.generated}/*.c" if:true="@{simple}"/>

                <regexpmapper from="(\w+)\.c(?:c|pp)?$" to="\1.obj"/>
            </apply>
        </sequential>
    </macrodef>

    <macrodef name="build">
        <attribute name="module"/>
        <attribute name="flags" default="/W2"/>
        <attribute name="simple" default="false"/>
        <element name="beforeCompile" optional="true"/>
        <element name="compileargs" optional="true"/>
        <element name="source" optional="true"/>
        <element name="beforeLink" optional="true"/>
        <element name="link" optional="true"/>
        <element name="linkargs" optional="true"/>
        <sequential>
            <local name="src.main"/>
            <local name="src.generated"/>
            <property name="src.main" location="${module.lwjgl}\@{module}\src\main\c" relative="true"/>
            <property name="src.generated" location="${module.lwjgl}\@{module}\src\generated\c" relative="true"/>

            <local name="name"/>
            <condition property="name" value="lwjgl" else="lwjgl_@{module}">
                <equals arg1="@{module}" arg2="core"/>
            </condition>

            <local name="dest"/>
            <property name="dest" value="${bin.native}/@{module}"/>

            <beforeCompile/>
            <compile flags="@{flags}" simple="@{simple}">
                <compileargs/>
                <source/>
            </compile>

            <local name="lib-uptodate"/>
            <uptodate property="lib-uptodate" targetfile="${lib}/${name}${LIB_POSTFIX}.dll">
                <srcfiles file="config/${platform}/build.xml"/>
                <srcfiles dir="${bin.native}/@{module}" includes="**"/>
            </uptodate>

            <!--
                x86: Generate DEF file to drop __stdcall decorations from JavaCritical
                functions. This is required because of a bug (wrong args_size) in
                hotspot/src/share/vm/prims/nativeLookup.cpp#lookup_critical_entry.
             -->
            <local name="undecorate"/>
            <condition property="undecorate" value="true">
                <and>
                    <not><isset property="lib-uptodate"/></not>
                    <equals arg1="${build.arch}" arg2="x86"/>
                </and>
            </condition>
            <concat destfile="${bin.native}/build/${name}${LIB_POSTFIX}.def" if:set="undecorate">
                <header filtering="no">LIBRARY    ${name}${LIB_POSTFIX}.dll
EXPORTS
</header>
                <!-- For each source file -->
                <source/>
                <fileset dir="." includes="${src.generated}/*.c" if:true="@{simple}"/>
                <filterchain>
                    <!-- For each line with a JNICALL -->
                    <linecontainsregexp>
                        <regexp pattern="JNICALL\s+JavaCritical_\p{javaJavaIdentifierPart}+?[(]"/>
                    </linecontainsregexp>
                    <!-- Append the function name -->
                    <replaceregex pattern="^.*?JNICALL\s+(.+?)[(].+$" replace="    \1"/>
                </filterchain>
            </concat>

            <beforeLink/>
            <apply executable="cl" failonerror="true" parallel="true" taskname="Linker" unless:set="lib-uptodate">
                <arg line='/LD /WX /nologo /Fe:"${bin.native}\build\${name}${LIB_POSTFIX}.dll"'/>

                <fileset dir="${dest}" includes="*.obj"/>
                <link/>

                <srcfile/>
                <arg value="/link"/>
                <arg value="/OPT:REF,ICF"/>
                <arg value="/DLL"/>
                <arg value="/LTCG"/>
                <arg value="/DEF:${bin.native}\build\${name}${LIB_POSTFIX}.def" if:set="undecorate"/>

                <linkargs/>
            </apply>

            <move file="${bin.native}/build/${name}${LIB_POSTFIX}.dll" todir="${lib}" unless:set="lib-uptodate"/>
            <delete file="${lib}/touch_${platform}_${build.arch}.txt" quiet="true" unless:set="lib-uptodate"/>
        </sequential>
    </macrodef>

    <macrodef name="build_simple">
        <attribute name="module"/>
        <sequential>
            <build module="@{module}" simple="true" if:true="${binding.@{module}}"/>
        </sequential>
    </macrodef>

    <target name="compile-native-platform">
        <mkdir dir="${bin.native}/build"/>

        <parallel threadsPerProcessor="1">

        <!-- CORE -->
        <build module="core" flags="/Wall /WX /wd4710 /wd4711">
            <compileargs>
                <arg value="/I${src.main}\dyncall"/>
            </compileargs>
            <source>
                <fileset dir=".">
                    <include name="${src.main}/*.c"/>
                    <include name="${src.generated}/*.c"/>
                    <include name="${src.generated}/${platform}/*.c"/>
                    <include name="${module.lwjgl}/jawt/src/generated/c/*.c" if:true="${binding.jawt}"/>
                </fileset>
            </source>
            <beforeLink>
                <mkdir dir="${lib}/${platform}/${build.arch}"/>
                <parallel threadsPerProcessor="2" failonany="true" unless:set="lib-uptodate">
                    <update-dependency name="dyncall" artifact="${build.arch}/dyncall_s.lib"/>
                    <update-dependency name="dyncallback" artifact="${build.arch}/dyncallback_s.lib"/>
                    <update-dependency name="dynload" artifact="${build.arch}/dynload_s.lib"/>
                </parallel>
            </beforeLink>
            <link>
                <fileset dir="${lib}/${platform}/${build.arch}/">
                    <include name="dyn*.lib"/>
                </fileset>
            </link>
        </build>

        <!-- LMDB -->
        <build module="lmdb" simple="true" if:true="${binding.lmdb}">
            <beforeCompile>
                <local name="VL32"/>
                <condition property="VL32">
                    <equals arg1="${build.arch}" arg2="x86"/>
                </condition>
                <compile flags="/W0">
                    <arg value="/I${src.main}"/>
                    <arg value="/DMDB_VL32=1" if:set="VL32"/>
                    <fileset dir="." includes="${src.main}/*.c"/>
                </compile>
            </beforeCompile>
            <linkargs>
                <arg value="Advapi32.lib"/>
            </linkargs>
        </build>

        <!-- LZ4 -->
        <build module="lz4" simple="true" if:true="${binding.lz4}">
            <beforeCompile>
                <compile>
                    <arg value="/I${src.main}"/>
                    <arg value="/I${module.lwjgl}\xxhash\src\main\c"/>
                    <fileset dir="." includes="${src.main}/*.c"/>
                    <fileset dir="." includes="${module.lwjgl}/xxhash/src/main/c/*.c"/>
                </compile>
            </beforeCompile>
        </build>

        <!-- NanoVG -->
        <build module="nanovg" simple="true" if:true="${binding.nanovg}">
            <compileargs>
                <arg value="/I${module.lwjgl}\stb\src\main\c"/>
            </compileargs>
        </build>

        <!-- NativeFileDialog -->
        <build module="nfd" simple="true" if:true="${binding.nfd}">
            <beforeCompile>
                <compile>
                    <arg value="/I${src.main}"/>
                    <arg value="/I${src.main}\include"/>
                    <fileset dir="." includes="${src.main}/nfd_common.c"/>
                    <fileset dir="." includes="${src.main}/nfd_win.cpp"/>
                </compile>
            </beforeCompile>
            <compileargs>
                <arg value="/I${src.main}\include"/>
            </compileargs>
            <linkargs>
                <arg value="Ole32.lib"/>
                <arg value="Shell32.lib"/>
            </linkargs>
        </build>

        <!-- Nuklear -->
        <build_simple module="nuklear"/>

        <!-- LibOVR -->
        <build module="ovr" if:true="${binding.ovr}">
            <beforeCompile>
                <compile relative="false">
                    <arg value="/I${OCULUS_SDK_PATH}\LibOVR\Include"/>
                    <fileset dir="${OCULUS_SDK_PATH}/LibOVR/Shim" includes="*.cpp"/>
                </compile>
            </beforeCompile>
            <compileargs>
                <arg value="/I${OCULUS_SDK_PATH}\LibOVR\Include"/>
                <arg value="/I${OCULUS_SDK_PATH}\LibOVR\Shim"/>
            </compileargs>
            <source>
                <fileset dir="." includes="${src.generated}/*.c"/>
            </source>
        </build>

        <!-- OpenGL -->
        <build_simple module="opengl"/>

        <!-- OpenGL ES -->
        <build_simple module="opengles"/>

        <!-- OpenVR -->
        <build_simple module="openvr"/>

        <!-- ParShapes -->
        <build_simple module="par"/>

        <!-- Remotery -->
        <build module="remotery" if:true="${binding.remotery}">
            <compileargs>
                <arg value="/I${src.main}"/>
            </compileargs>
            <source>
                <fileset dir="." includes="${src.generated}/*.c" excludes="**/*Metal.c"/>
            </source>
        </build>

        <!-- rpmalloc -->
        <build module="rpmalloc" simple="true" if:true="${binding.rpmalloc}">
            <linkargs>
                <arg value="Advapi32.lib"/>
            </linkargs>
        </build>

        <!-- SSE -->
        <build_simple module="sse"/>

        <!-- stb -->
        <build_simple module="stb"/>

        <!-- tinyexr -->
        <build module="tinyexr" simple="true" if:true="${binding.tinyexr}">
            <beforeCompile>
                <compile>
                    <arg value="/I${src.main}"/>
                    <fileset dir="." includes="${src.main}/*.cc"/>
                </compile>
            </beforeCompile>
        </build>

        <!-- tiny file dialogs -->
        <build module="tinyfd" simple="true" if:true="${binding.tinyfd}">
            <beforeCompile>
                <compile>
                    <arg value="/I${src.main}"/>
                    <fileset dir="." includes="${src.main}/*.c"/>
                </compile>
            </beforeCompile>
            <linkargs>
                <arg value="Comdlg32.lib"/>
                <arg value="Ole32.lib"/>
                <arg value="Shell32.lib"/>
                <arg value="User32.lib"/>
            </linkargs>
        </build>

        <!-- AMD Tootle -->
        <build module="tootle" if:true="${binding.tootle}">
            <beforeCompile>
                <compile>
                    <fileset dir="." includes="${src.main}/DirectXMesh/*.cpp"/>
                </compile>

                <compile flags="/TP /D_DX11_1_">
                    <arg value="/I${src.main}"/>
                    <arg value="/I${src.main}\include"/>
                    <arg value="/I${src.main}\RayTracer"/>
                    <arg value="/I${src.main}\RayTracer\JRT"/>
                    <arg value="/I${src.main}\RayTracer\Math"/>
                    <arg value="/I${src.main}\DirectXMesh"/>
                    <fileset dir="." includes="${src.main}/*.c"/>
                    <fileset dir="." includes="${src.main}/*.cpp"/>
                    <fileset dir="." includes="${src.main}/RayTracer/*.cpp"/>
                    <fileset dir="." includes="${src.main}/RayTracer/JRT/*.cpp"/>
                    <fileset dir="." includes="${src.main}/RayTracer/Math/*.cpp"/>
                </compile>
            </beforeCompile>
            <compileargs>
                <arg value="/I${src.main}\include"/>
            </compileargs>
            <source>
                <fileset dir="." includes="${src.generated}/*.cpp"/>
            </source>
            <linkargs>
                <arg value="User32.lib"/>
                <arg value="D3d9.lib"/>
            </linkargs>
        </build>

        <!-- Vulkan Memory Allocator -->
        <build module="vma" if:true="${binding.vma}">
            <compileargs>
                <arg value="/I${src.main}"/>
                <arg value="/I${module.lwjgl}\vulkan\src\main\c"/>
            </compileargs>
            <source>
                <fileset dir="." includes="${src.generated}/*.cpp"/>
            </source>
        </build>

        <!-- xxHash -->
        <build_simple module="xxhash"/>

        <!-- yoga -->
        <build module="yoga" simple="true" if:true="${binding.yoga}">
            <beforeCompile>
                <compile>
                    <arg value="/I${src.main}"/>
                    <fileset dir="." includes="${src.main}/*.cpp"/>
                </compile>
            </beforeCompile>
        </build>

        <!-- zstd -->
        <build module="zstd" simple="true" if:true="${binding.zstd}">
            <beforeCompile>
                <compile flags="/DZSTD_MULTITHREAD">
                    <arg value="/I${src.main}"/>
                    <arg value="/I${src.main}\common"/>
                    <arg value="/I${src.main}\compress"/>
                    <arg value="/I${src.main}\decompress"/>
                    <arg value="/I${src.main}\dictBuilder"/>
                    <arg value="/I${module.lwjgl}\xxhash\src\main\c"/>
                    <fileset dir="." includes="${src.main}/common/*.c"/>
                    <fileset dir="." includes="${src.main}/compress/*.c"/>
                    <fileset dir="." includes="${src.main}/decompress/*.c"/>
                    <fileset dir="." includes="${src.main}/dictBuilder/*.c"/>
                    <fileset dir="." includes="${module.lwjgl}/xxhash/src/main/c/*.c"/>
                </compile>
            </beforeCompile>
            <compileargs>
                <arg value="/I${src.main}\common"/>
                <arg value="/I${src.main}\dictBuilder"/>
            </compileargs>
        </build>

        </parallel>

        <local name="native-dependencies-uptodate"/>
        <condition property="native-dependencies-uptodate" value="true">
            <or>
                <istrue value="${build.offline}"/>
                <resourceexists>
                    <file file="${lib}/touch_${platform}_${build.arch}.txt"/>
                </resourceexists>
            </or>
        </condition>

        <sequential unless:set="native-dependencies-uptodate">
            <mkdir dir="${lib}/${platform}/${build.arch}"/>

            <parallel threadsPerProcessor="4" failonany="true">

            <update-dependency name="Assimp" artifact="${build.arch}/assimp${LIB_POSTFIX}.dll" dest="${lib}" if:true="${binding.assimp}"/>
            <update-dependency name="bgfx" artifact="${build.arch}/bgfx${LIB_POSTFIX}.dll" dest="${lib}" if:true="${binding.bgfx}"/>
            <update-dependency name="jemalloc" artifact="${build.arch}/jemalloc${LIB_POSTFIX}.dll" dest="${lib}" if:true="${binding.jemalloc}"/>
            <update-dependency name="GLFW" artifact="${build.arch}/glfw${LIB_POSTFIX}.dll" dest="${lib}" if:true="${binding.glfw}"/>
            <update-dependency name="OpenAL32" artifact="${build.arch}/OpenAL${LIB_POSTFIX}.dll" dest="${lib}" if:true="${binding.openal}"/>
            <update-dependency name="OpenVR" artifact="${build.arch}/openvr_api${LIB_POSTFIX}.dll" dest="${lib}" if:true="${binding.openvr}"/>
            <update-dependency name="Opus" artifact="${build.arch}/opus${LIB_POSTFIX}.dll" dest="${lib}" if:true="${binding.opus}"/>

            </parallel>

            <touch file="${lib}/touch_${platform}_${build.arch}.txt" verbose="false"/>
        </sequential>
    </target>
</project>