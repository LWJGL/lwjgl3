<!--
  ~ Copyright LWJGL. All rights reserved.
  ~ License terms: https://www.lwjgl.org/license
  -->
<project name="native-windows" basedir="../.." xmlns:if="ant:if" xmlns:unless="ant:unless">
	<import file="../build-definitions.xml"/>

	<condition property="LIB_POSTFIX" value="" else="32">
		<equals arg1="${build.arch}" arg2="x64"/>
	</condition>

	<macrodef name="compile">
		<attribute name="dest"/>
		<attribute name="flags"/>
		<attribute name="relative" default="true"/>
		<element name="source" implicit="true"/>
		<sequential>
			<mkdir dir="@{dest}"/>
			<apply executable="cl" dest="@{dest}" skipemptyfilesets="true" failonerror="true" relative="@{relative}" parallel="true" taskname="Compiler">
				<arg line="/c @{flags} /EHsc /Ox /GF /Gy /GL /GR- /GS- /MT /MP /nologo /DNDEBUG /DLWJGL_WINDOWS /DLWJGL_${build.arch}"/>

				<arg value="/Fo@{dest}\"/>

				<arg value="/I${jni.headers}"/>
				<arg value="/I${jni.headers}\win32"/>

				<arg value="/I${src.include}\system"/>
				<arg value="/I${src.include}\system\windows"/>

				<source/>

				<regexpmapper from="(\w+)\.c(pp)?$" to="\1.obj"/>
			</apply>
		</sequential>
	</macrodef>

	<macrodef name="build">
		<attribute name="name"/>
		<attribute name="dest"/>
		<attribute name="flags" default="/Wall /WX"/>
		<element name="compileargs" optional="true"/>
		<element name="source"/>
		<element name="link" optional="true"/>
		<element name="linkargs" optional="true"/>
		<sequential>
			<compile dest="@{dest}" flags="@{flags}">
				<compileargs/>
				<source/>
			</compile>

			<local name="lib-uptodate"/>
			<uptodate property="lib-uptodate" targetfile="${lib}/@{name}${LIB_POSTFIX}.dll">
				<srcfiles file="config/${platform}/build.xml"/>
				<srcfiles dir="@{dest}" includes="**"/>
			</uptodate>

			<!-- Lazily update dependencies -->
			<local name="update-dependencies"/>
			<condition property="update-dependencies" value="true">
				<not>
					<or>
						<isset property="dependencies-uptodate"/>
						<isset property="lib-uptodate"/>
						<istrue value="${build.offline}"/>
					</or>
				</not>
			</condition>
			<antcall target="-update-dependencies-${build.arch}" if:set="update-dependencies"/>
			<property name="dependencies-uptodate" value="true" if:set="update-dependencies"/>

			<!--
				x86: Generate DEF file to drop __stdcall decorations from JavaCritical
				functions. This is required because of a bug (wrong args_size) in
				hotspot/src/share/vm/prims/nativeLookup.cpp#lookup_critical_entry.
			 -->
			<local name="undecorate"/>
			<condition property="undecorate" value="true">
				<and>
					<not><isset property="lib-uptodate"/></not>
					<equals arg1="${build.arch}" arg2="x86"/>
				</and>
			</condition>
			<concat destfile="${bin.native}/build/@{name}${LIB_POSTFIX}.def" if:set="undecorate">
				<header filtering="no">LIBRARY    @{name}${LIB_POSTFIX}.dll
EXPORTS
</header>
				<!-- For each source file -->
				<source/>
				<filterchain>
					<!-- For each line with a JNICALL -->
					<linecontainsregexp>
						<regexp pattern="JNICALL\s+JavaCritical_\p{javaJavaIdentifierPart}+?[(]"/>
					</linecontainsregexp>
					<!-- Append the function name -->
					<replaceregex pattern="^.*?JNICALL\s+(.+?)[(].+$" replace="    \1"/>
				</filterchain>
			</concat>

			<apply executable="cl" failonerror="true" parallel="true" taskname="Linker" unless:set="lib-uptodate">
				<arg line='/LD /WX /nologo /Fe:"${bin.native}\build\@{name}${LIB_POSTFIX}.dll"'/>

				<fileset dir="@{dest}" includes="*.obj"/>
				<link/>

				<srcfile/>
				<arg value="/link"/>
				<arg value="/OPT:REF,ICF"/>
				<arg value="/DLL"/>
				<arg value="/LTCG"/>
				<arg value="/DEF:${bin.native}\build\@{name}${LIB_POSTFIX}.def" if:set="undecorate"/>

				<linkargs/>
			</apply>

			<move file="${bin.native}/build/@{name}${LIB_POSTFIX}.dll" todir="${lib}" unless:set="lib-uptodate"/>
		</sequential>
	</macrodef>

	<target name="compile-native-platform">
		<mkdir dir="${bin.native}/build"/>

		<!-- CORE -->
		<build name="lwjgl" dest="${bin.native}/core">
			<compileargs>
				<arg value="/I${src.include}\system\dyncall"/>
			</compileargs>
			<source>
				<fileset dir=".">
					<include name="${src.native}/system/*.c"/>
					<exclude name="${src.native}/system/lwjgl_malloc.c"/>
					<include name="${src.generated.native}/system/*.c"/>
					<include name="${src.generated.native}/system/dyncall/*.c"/>
					<include name="${src.generated.native}/system/jawt/*.c" if:true="${binding.jawt}"/>
					<include name="${src.generated.native}/system/libc/*.c"/>
					<include name="${src.generated.native}/system/windows/*.c"/>
				</fileset>
			</source>
			<link>
				<fileset dir="${lib}/windows/${build.arch}/">
					<include name="dyn*.lib"/>
				</fileset>
			</link>
		</build>

		<!-- LMDB -->
		<compile dest="${bin.native}/lmdb" flags="/W0" if:true="${binding.lmdb}">
			<arg value="/I${src.include}\util\lmdb"/>
			<fileset dir="." includes="${src.include}/util/lmdb/*.c"/>
		</compile>
		<build name="lwjgl_lmdb" dest="${bin.native}/lmdb" if:true="${binding.lmdb}">
			<compileargs>
				<arg value="/I${src.include}\util\lmdb"/>
			</compileargs>
			<source>
				<fileset dir="." includes="${src.generated.native}/util/lmdb/*.c"/>
			</source>
			<linkargs>
				<arg value="ntdll.lib"/>
				<arg value="Advapi32.lib"/>
			</linkargs>
		</build>

		<!-- NanoVG -->
		<build name="lwjgl_nanovg" dest="${bin.native}/nanovg" if:true="${binding.nanovg}">
			<compileargs>
				<arg value="/I${src.include}\nanovg"/>
				<arg value="/I${src.include}\stb"/>
			</compileargs>
			<source>
				<fileset dir="." includes="${src.native}/system/lwjgl_malloc.c"/>
				<fileset dir="." includes="${src.generated.native}/nanovg/*.c"/>
			</source>
		</build>

		<!-- NativeFileDialog -->
		<compile dest="${bin.native}/nfd" flags="" if:true="${binding.nfd}">
			<arg value="/I${src.include}\util\nfd"/>
			<arg value="/I${src.include}\util\nfd\include"/>
			<fileset dir="." includes="${src.include}/util/nfd/nfd_common.c"/>
			<fileset dir="." includes="${src.include}/util/nfd/nfd_win.cpp"/>
		</compile>
		<build name="lwjgl_nfd" dest="${bin.native}/nfd" if:true="${binding.nfd}">
			<compileargs>
				<arg value="/I${src.include}\util\nfd"/>
				<arg value="/I${src.include}\util\nfd\include"/>
			</compileargs>
			<source>
				<fileset dir="." includes="${src.native}/system/lwjgl_malloc.c"/>
				<fileset dir="." includes="${src.generated.native}/util/nfd/*.c"/>
			</source>
			<linkargs>
				<arg value="Ole32.lib"/>
				<arg value="Shell32.lib"/>
			</linkargs>
		</build>

		<!-- Nuklear -->
		<build name="lwjgl_nuklear" dest="${bin.native}/nuklear" if:true="${binding.nuklear}">
			<compileargs>
				<arg value="/I${src.include}\nuklear"/>
			</compileargs>
			<source>
				<fileset dir="." includes="${src.generated.native}/nuklear/*.c"/>
			</source>
		</build>

		<!-- LibOVR -->
		<compile dest="${bin.native}/ovr" flags="" relative="false" if:true="${binding.ovr}">
			<arg value="/I${OCULUS_SDK_PATH}\LibOVR\Include"/>
			<fileset dir="${OCULUS_SDK_PATH}/LibOVR/Src" includes="*.cpp"/>
		</compile>
		<build name="lwjgl_ovr" dest="${bin.native}/ovr" if:true="${binding.ovr}">
			<compileargs>
				<arg value="/I${OCULUS_SDK_PATH}\LibOVR\Include"/>
				<arg value="/I${OCULUS_SDK_PATH}\LibOVR\Src"/>
			</compileargs>
			<source>
				<fileset dir="." includes="${src.generated.native}/ovr/*.c"/>
			</source>
		</build>

		<!-- ParShapes -->
		<build name="lwjgl_par" dest="${bin.native}/par" if:true="${binding.par}">
			<compileargs>
				<arg value="/I${src.include}\util\par"/>
			</compileargs>
			<source>
				<fileset dir="." includes="${src.native}/system/lwjgl_malloc.c"/>
				<fileset dir="." includes="${src.generated.native}/util/par/*.c"/>
			</source>
		</build>

		<!-- SSE -->
		<build name="lwjgl_sse" dest="${bin.native}/sse" if:true="${binding.sse}">
			<compileargs>
				<arg value="/I${src.include}\util"/>
			</compileargs>
			<source>
				<fileset dir="." includes="${src.generated.native}/util/simd/*.c"/>
			</source>
		</build>

		<!-- stb -->
		<build name="lwjgl_stb" dest="${bin.native}/stb" if:true="${binding.stb}">
			<compileargs>
				<arg value="/I${src.include}\stb"/>
			</compileargs>
			<source>
				<fileset dir="." includes="${src.native}/system/lwjgl_malloc.c"/>
				<fileset dir="." includes="${src.generated.native}/stb/*.c"/>
			</source>
		</build>

		<!-- tiny file dialogs -->
		<compile dest="${bin.native}/tinyfd" flags="" if:true="${binding.tinyfd}">
			<arg value="/I${src.include}\util\tinyfd"/>
			<fileset dir="." includes="${src.native}/util/tinyfd/*.c"/>
		</compile>
		<build name="lwjgl_tinyfd" dest="${bin.native}/tinyfd" if:true="${binding.tinyfd}">
			<compileargs>
				<arg value="/I${src.include}\util\tinyfd"/>
			</compileargs>
			<source>
				<fileset dir="." includes="${src.generated.native}/util/tinyfd/*.c"/>
			</source>
			<linkargs>
				<arg value="Comdlg32.lib"/>
				<arg value="Ole32.lib"/>
				<arg value="Shell32.lib"/>
				<arg value="User32.lib"/>
			</linkargs>
		</build>

		<!-- xxHash -->
		<build name="lwjgl_xxhash" dest="${bin.native}/xxhash" if:true="${binding.xxhash}">
			<compileargs>
				<arg value="/I${src.include}\system"/>
				<arg value="/I${src.include}\util\xxhash"/>
				<arg value="/I${src.native}\util\xxhash"/>
			</compileargs>
			<source>
				<fileset dir="." includes="${src.native}/system/lwjgl_malloc.c"/>
				<fileset dir="." includes="${src.generated.native}/util/xxhash/*.c"/>
			</source>
		</build>
	</target>

	<target name="-update-dependencies-x86">
		<mkdir dir="${lib}/windows/x86"/>

		<update-dependency name="dyncall (x86)" artifact="x86/dyncall_s.lib"/>
		<update-dependency name="dyncallback (x86)" artifact="x86/dyncallback_s.lib"/>
		<update-dependency name="dynload (x86)" artifact="x86/dynload_s.lib"/>

		<update-dependency name="bgfx (x86)" artifact="x86/bgfx32.dll" dest="${lib}" if:true="${binding.bgfx}"/>
		<update-dependency name="jemalloc (x86)" artifact="x86/jemalloc32.dll" dest="${lib}" if:true="${binding.jemalloc}"/>
		<update-dependency name="glfw3 (x86)" artifact="x86/glfw32.dll" dest="${lib}" if:true="${binding.glfw}"/>
		<update-dependency name="OpenAL32 (x86)" artifact="x86/OpenAL32.dll" dest="${lib}" if:true="${binding.openal}"/>
	</target>

	<target name="-update-dependencies-x64">
		<mkdir dir="${lib}/windows/x64"/>

		<update-dependency name="dyncall (x64)" artifact="x64/dyncall_s.lib"/>
		<update-dependency name="dyncallback (x64)" artifact="x64/dyncallback_s.lib"/>
		<update-dependency name="dynload (x64)" artifact="x64/dynload_s.lib"/>

		<update-dependency name="bgfx (x64)" artifact="x64/bgfx.dll" dest="${lib}" if:true="${binding.bgfx}"/>
		<update-dependency name="jemalloc (x64)" artifact="x64/jemalloc.dll" dest="${lib}" if:true="${binding.jemalloc}"/>
		<update-dependency name="glfw3 (x64)" artifact="x64/glfw.dll" dest="${lib}" if:true="${binding.glfw}"/>
		<update-dependency name="OpenAL32 (x64)" artifact="x64/OpenAL.dll" dest="${lib}" if:true="${binding.openal}"/>
	</target>
</project>
